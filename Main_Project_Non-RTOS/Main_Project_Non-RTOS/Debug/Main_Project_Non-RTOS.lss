
Main_Project_Non-RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000227a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00802000  0000227a  0000230e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00802030  00802030  0000233e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009cbd  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b7a  00000000  00000000  0000c3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039ac  00000000  00000000  0000ff77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ff0  00000000  00000000  00013924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c231  00000000  00000000  00014914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ff6  00000000  00000000  00040b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  00044b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000955d  00000000  00000000  00044e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__vector_13>
      38:	0c 94 57 07 	jmp	0xeae	; 0xeae <__vector_14>
      3c:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_15>
      40:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_16>
      44:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_17>
      48:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_18>
      4c:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_19>
      50:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_20>
      54:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_21>
      58:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_22>
      5c:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_23>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_46>
      bc:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_47>
      c0:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_48>
      c4:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_49>
      c8:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_50>
      cc:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_51>
      d0:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_52>
      d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     134:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_77>
     138:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_78>
     13c:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_79>
     140:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_80>
     144:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_81>
     148:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_82>
     14c:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_83>
     150:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_84>
     154:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_85>
     158:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_86>
     15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 c0 02 	jmp	0x580	; 0x580 <_ZN17LiquidCrystal_I2C5writeEh>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e3       	ldi	r29, 0x3F	; 63
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60
     210:	18 be       	out	0x38, r1	; 56
     212:	19 be       	out	0x39, r1	; 57
     214:	1a be       	out	0x3a, r1	; 58
     216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	ea e7       	ldi	r30, 0x7A	; 122
     220:	f2 e2       	ldi	r31, 0x22	; 34
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	a0 33       	cpi	r26, 0x30	; 48
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
     232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
     234:	20 e2       	ldi	r18, 0x20	; 32
     236:	a0 e3       	ldi	r26, 0x30	; 48
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ae 37       	cpi	r26, 0x7E	; 126
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 4a 03 	call	0x694	; 0x694 <main>
     248:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <_ZN17LiquidCrystal_I2CC1Ehhhh>:
	expanderWrite(_data & ~En);	// En low
	_delay_us(50);		// commands need > 37us to settle
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
	createChar(char_num, rows);
     250:	0f 93       	push	r16
     252:	fc 01       	movw	r30, r24
     254:	88 e1       	ldi	r24, 0x18	; 24
     256:	90 e2       	ldi	r25, 0x20	; 32
     258:	80 83       	st	Z, r24
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	62 83       	std	Z+2, r22	; 0x02
     25e:	46 83       	std	Z+6, r20	; 0x06
     260:	27 83       	std	Z+7, r18	; 0x07
     262:	00 87       	std	Z+8, r16	; 0x08
     264:	88 e0       	ldi	r24, 0x08	; 8
     266:	81 87       	std	Z+9, r24	; 0x09
     268:	0f 91       	pop	r16
     26a:	08 95       	ret

0000026c <_ZN17LiquidCrystal_I2C12printMessageEPch>:
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	44 23       	and	r20, r20
     27a:	e1 f0       	breq	.+56     	; 0x2b4 <_ZN17LiquidCrystal_I2C12printMessageEPch+0x48>
     27c:	8c 01       	movw	r16, r24
     27e:	eb 01       	movw	r28, r22
     280:	41 50       	subi	r20, 0x01	; 1
     282:	e4 2e       	mov	r14, r20
     284:	f1 2c       	mov	r15, r1
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	e8 1a       	sub	r14, r24
     28a:	f8 0a       	sbc	r15, r24
     28c:	e6 0e       	add	r14, r22
     28e:	f7 1e       	adc	r15, r23
     290:	69 91       	ld	r22, Y+
     292:	d8 01       	movw	r26, r16
     294:	ed 91       	ld	r30, X+
     296:	fc 91       	ld	r31, X
     298:	01 90       	ld	r0, Z+
     29a:	f0 81       	ld	r31, Z
     29c:	e0 2d       	mov	r30, r0
     29e:	c8 01       	movw	r24, r16
     2a0:	19 95       	eicall
     2a2:	87 ea       	ldi	r24, 0xA7	; 167
     2a4:	91 e6       	ldi	r25, 0x61	; 97
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <_ZN17LiquidCrystal_I2C12printMessageEPch+0x3a>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <_ZN17LiquidCrystal_I2C12printMessageEPch+0x40>
     2ac:	00 00       	nop
     2ae:	ce 15       	cp	r28, r14
     2b0:	df 05       	cpc	r29, r15
     2b2:	71 f7       	brne	.-36     	; 0x290 <_ZN17LiquidCrystal_I2C12printMessageEPch+0x24>
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	08 95       	ret

000002c2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	2c 97       	sbiw	r28, 0x0c	; 12
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	fc 01       	movw	r30, r24
     2d2:	21 85       	ldd	r18, Z+9	; 0x09
     2d4:	62 2b       	or	r22, r18
     2d6:	6c 87       	std	Y+12, r22	; 0x0c
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	1d 82       	std	Y+5, r1	; 0x05
     2dc:	1e 82       	std	Y+6, r1	; 0x06
     2de:	9e 01       	movw	r18, r28
     2e0:	24 5f       	subi	r18, 0xF4	; 244
     2e2:	3f 4f       	sbci	r19, 0xFF	; 255
     2e4:	2f 83       	std	Y+7, r18	; 0x07
     2e6:	38 87       	std	Y+8, r19	; 0x08
     2e8:	82 81       	ldd	r24, Z+2	; 0x02
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	89 87       	std	Y+9, r24	; 0x09
     2f2:	9a 87       	std	Y+10, r25	; 0x0a
     2f4:	1b 86       	std	Y+11, r1	; 0x0b
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	be 01       	movw	r22, r28
     2fa:	6f 5f       	subi	r22, 0xFF	; 255
     2fc:	7f 4f       	sbci	r23, 0xFF	; 255
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	94 e0       	ldi	r25, 0x04	; 4
     302:	0e 94 41 06 	call	0xc82	; 0xc82 <twi_master_transfer>
     306:	2c 96       	adiw	r28, 0x0c	; 12
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <_ZN17LiquidCrystal_I2C11noBacklightEv>:
     312:	fc 01       	movw	r30, r24
     314:	11 86       	std	Z+9, r1	; 0x09
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     31c:	08 95       	ret

0000031e <_ZN17LiquidCrystal_I2C9backlightEv>:
     31e:	28 e0       	ldi	r18, 0x08	; 8
     320:	fc 01       	movw	r30, r24
     322:	21 87       	std	Z+9, r18	; 0x09
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     32a:	08 95       	ret

0000032c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	8c 01       	movw	r16, r24
     334:	c6 2f       	mov	r28, r22
     336:	64 60       	ori	r22, 0x04	; 4
     338:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     33c:	00 00       	nop
     33e:	6c 2f       	mov	r22, r28
     340:	6b 7f       	andi	r22, 0xFB	; 251
     342:	c8 01       	movw	r24, r16
     344:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     348:	80 e1       	ldi	r24, 0x10	; 16
     34a:	8a 95       	dec	r24
     34c:	f1 f7       	brne	.-4      	; 0x34a <_ZN17LiquidCrystal_I2C11pulseEnableEh+0x1e>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_ZN17LiquidCrystal_I2C11pulseEnableEh+0x24>
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
     360:	16 2f       	mov	r17, r22
     362:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     366:	61 2f       	mov	r22, r17
     368:	ce 01       	movw	r24, r28
     36a:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN17LiquidCrystal_I2C11pulseEnableEh>
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	08 95       	ret

00000376 <_ZN17LiquidCrystal_I2C4sendEhh>:
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	8c 01       	movw	r16, r24
     380:	c6 2f       	mov	r28, r22
     382:	d4 2f       	mov	r29, r20
     384:	60 7f       	andi	r22, 0xF0	; 240
     386:	64 2b       	or	r22, r20
     388:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN17LiquidCrystal_I2C10write4bitsEh>
     38c:	80 e1       	ldi	r24, 0x10	; 16
     38e:	c8 9f       	mul	r28, r24
     390:	b0 01       	movw	r22, r0
     392:	11 24       	eor	r1, r1
     394:	6d 2b       	or	r22, r29
     396:	c8 01       	movw	r24, r16
     398:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN17LiquidCrystal_I2C10write4bitsEh>
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <_ZN17LiquidCrystal_I2C5clearEv>:
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN17LiquidCrystal_I2C4sendEhh>
     3ae:	83 ef       	ldi	r24, 0xF3	; 243
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <_ZN17LiquidCrystal_I2C5clearEv+0xc>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <_ZN17LiquidCrystal_I2C5clearEv+0x12>
     3b8:	00 00       	nop
     3ba:	08 95       	ret

000003bc <_ZN17LiquidCrystal_I2C4homeEv>:
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	62 e0       	ldi	r22, 0x02	; 2
     3c0:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN17LiquidCrystal_I2C4sendEhh>
     3c4:	83 ef       	ldi	r24, 0xF3	; 243
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <_ZN17LiquidCrystal_I2C4homeEv+0xc>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_ZN17LiquidCrystal_I2C4homeEv+0x12>
     3ce:	00 00       	nop
     3d0:	08 95       	ret

000003d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	28 97       	sbiw	r28, 0x08	; 8
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	9c 01       	movw	r18, r24
     3e2:	88 e0       	ldi	r24, 0x08	; 8
     3e4:	e0 e0       	ldi	r30, 0x00	; 0
     3e6:	f0 e2       	ldi	r31, 0x20	; 32
     3e8:	de 01       	movw	r26, r28
     3ea:	11 96       	adiw	r26, 0x01	; 1
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	8a 95       	dec	r24
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <_ZN17LiquidCrystal_I2C9setCursorEhh+0x1a>
     3f4:	f9 01       	movw	r30, r18
     3f6:	87 81       	ldd	r24, Z+7	; 0x07
     3f8:	84 17       	cp	r24, r20
     3fa:	10 f4       	brcc	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	4f ef       	ldi	r20, 0xFF	; 255
     3fe:	48 0f       	add	r20, r24
     400:	e4 2f       	mov	r30, r20
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	ec 0f       	add	r30, r28
     40a:	fd 1f       	adc	r31, r29
     40c:	91 81       	ldd	r25, Z+1	; 0x01
     40e:	69 0f       	add	r22, r25
     410:	60 68       	ori	r22, 0x80	; 128
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	c9 01       	movw	r24, r18
     416:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN17LiquidCrystal_I2C4sendEhh>
     41a:	28 96       	adiw	r28, 0x08	; 8
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	de bf       	out	0x3e, r29	; 62
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <_ZN17LiquidCrystal_I2C9printTempEv>:
     426:	af 92       	push	r10
     428:	bf 92       	push	r11
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	60 97       	sbiw	r28, 0x10	; 16
     440:	cd bf       	out	0x3d, r28	; 61
     442:	de bf       	out	0x3e, r29	; 62
     444:	6c 01       	movw	r12, r24
     446:	19 e1       	ldi	r17, 0x19	; 25
     448:	e1 2c       	mov	r14, r1
     44a:	f1 2c       	mov	r15, r1
     44c:	0e 94 01 07 	call	0xe02	; 0xe02 <_Z8readTempv>
     450:	e8 0e       	add	r14, r24
     452:	f9 1e       	adc	r15, r25
     454:	11 50       	subi	r17, 0x01	; 1
     456:	d1 f7       	brne	.-12     	; 0x44c <_ZN17LiquidCrystal_I2C9printTempEv+0x26>
     458:	97 01       	movw	r18, r14
     45a:	af ea       	ldi	r26, 0xAF	; 175
     45c:	b7 e4       	ldi	r27, 0x47	; 71
     45e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__umulhisi3>
     462:	e8 1a       	sub	r14, r24
     464:	f9 0a       	sbc	r15, r25
     466:	f6 94       	lsr	r15
     468:	e7 94       	ror	r14
     46a:	8e 0d       	add	r24, r14
     46c:	9f 1d       	adc	r25, r15
     46e:	4a e0       	ldi	r20, 0x0A	; 10
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	92 95       	swap	r25
     478:	82 95       	swap	r24
     47a:	8f 70       	andi	r24, 0x0F	; 15
     47c:	89 27       	eor	r24, r25
     47e:	9f 70       	andi	r25, 0x0F	; 15
     480:	89 27       	eor	r24, r25
     482:	0e 94 06 11 	call	0x220c	; 0x220c <__itoa_ncheck>
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	62 e0       	ldi	r22, 0x02	; 2
     48a:	c6 01       	movw	r24, r12
     48c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     490:	8c e0       	ldi	r24, 0x0C	; 12
     492:	e8 e0       	ldi	r30, 0x08	; 8
     494:	f0 e2       	ldi	r31, 0x20	; 32
     496:	de 01       	movw	r26, r28
     498:	15 96       	adiw	r26, 0x05	; 5
     49a:	01 90       	ld	r0, Z+
     49c:	0d 92       	st	X+, r0
     49e:	8a 95       	dec	r24
     4a0:	e1 f7       	brne	.-8      	; 0x49a <_ZN17LiquidCrystal_I2C9printTempEv+0x74>
     4a2:	7e 01       	movw	r14, r28
     4a4:	85 e0       	ldi	r24, 0x05	; 5
     4a6:	e8 0e       	add	r14, r24
     4a8:	f1 1c       	adc	r15, r1
     4aa:	5e 01       	movw	r10, r28
     4ac:	a0 e1       	ldi	r26, 0x10	; 16
     4ae:	aa 0e       	add	r10, r26
     4b0:	b1 1c       	adc	r11, r1
     4b2:	f7 01       	movw	r30, r14
     4b4:	61 91       	ld	r22, Z+
     4b6:	7f 01       	movw	r14, r30
     4b8:	d6 01       	movw	r26, r12
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	01 90       	ld	r0, Z+
     4c0:	f0 81       	ld	r31, Z
     4c2:	e0 2d       	mov	r30, r0
     4c4:	c6 01       	movw	r24, r12
     4c6:	19 95       	eicall
     4c8:	ea 14       	cp	r14, r10
     4ca:	fb 04       	cpc	r15, r11
     4cc:	91 f7       	brne	.-28     	; 0x4b2 <_ZN17LiquidCrystal_I2C9printTempEv+0x8c>
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	65 e0       	ldi	r22, 0x05	; 5
     4d2:	c6 01       	movw	r24, r12
     4d4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     4d8:	7e 01       	movw	r14, r28
     4da:	01 e0       	ldi	r16, 0x01	; 1
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <_ZN17LiquidCrystal_I2C9printTempEv+0xc2>
     4de:	1f 5f       	subi	r17, 0xFF	; 255
     4e0:	0f 5f       	subi	r16, 0xFF	; 255
     4e2:	bf ef       	ldi	r27, 0xFF	; 255
     4e4:	eb 1a       	sub	r14, r27
     4e6:	fb 0a       	sbc	r15, r27
     4e8:	12 30       	cpi	r17, 0x02	; 2
     4ea:	51 f4       	brne	.+20     	; 0x500 <_ZN17LiquidCrystal_I2C9printTempEv+0xda>
     4ec:	d6 01       	movw	r26, r12
     4ee:	ed 91       	ld	r30, X+
     4f0:	fc 91       	ld	r31, X
     4f2:	01 90       	ld	r0, Z+
     4f4:	f0 81       	ld	r31, Z
     4f6:	e0 2d       	mov	r30, r0
     4f8:	6e e2       	ldi	r22, 0x2E	; 46
     4fa:	c6 01       	movw	r24, r12
     4fc:	19 95       	eicall
     4fe:	ef cf       	rjmp	.-34     	; 0x4de <_ZN17LiquidCrystal_I2C9printTempEv+0xb8>
     500:	13 30       	cpi	r17, 0x03	; 3
     502:	58 f0       	brcs	.+22     	; 0x51a <_ZN17LiquidCrystal_I2C9printTempEv+0xf4>
     504:	d6 01       	movw	r26, r12
     506:	ed 91       	ld	r30, X+
     508:	fc 91       	ld	r31, X
     50a:	01 90       	ld	r0, Z+
     50c:	f0 81       	ld	r31, Z
     50e:	e0 2d       	mov	r30, r0
     510:	d7 01       	movw	r26, r14
     512:	6c 91       	ld	r22, X
     514:	c6 01       	movw	r24, r12
     516:	19 95       	eicall
     518:	0b c0       	rjmp	.+22     	; 0x530 <_ZN17LiquidCrystal_I2C9printTempEv+0x10a>
     51a:	d6 01       	movw	r26, r12
     51c:	ed 91       	ld	r30, X+
     51e:	fc 91       	ld	r31, X
     520:	01 90       	ld	r0, Z+
     522:	f0 81       	ld	r31, Z
     524:	e0 2d       	mov	r30, r0
     526:	d7 01       	movw	r26, r14
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	6c 91       	ld	r22, X
     52c:	c6 01       	movw	r24, r12
     52e:	19 95       	eicall
     530:	04 30       	cpi	r16, 0x04	; 4
     532:	a8 f2       	brcs	.-86     	; 0x4de <_ZN17LiquidCrystal_I2C9printTempEv+0xb8>
     534:	41 e0       	ldi	r20, 0x01	; 1
     536:	6a e0       	ldi	r22, 0x0A	; 10
     538:	c6 01       	movw	r24, r12
     53a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     53e:	d6 01       	movw	r26, r12
     540:	ed 91       	ld	r30, X+
     542:	fc 91       	ld	r31, X
     544:	01 90       	ld	r0, Z+
     546:	f0 81       	ld	r31, Z
     548:	e0 2d       	mov	r30, r0
     54a:	66 e4       	ldi	r22, 0x46	; 70
     54c:	c6 01       	movw	r24, r12
     54e:	19 95       	eicall
     550:	60 96       	adiw	r28, 0x10	; 16
     552:	cd bf       	out	0x3d, r28	; 61
     554:	de bf       	out	0x3e, r29	; 62
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	bf 90       	pop	r11
     568:	af 90       	pop	r10
     56a:	08 95       	ret

0000056c <_ZN17LiquidCrystal_I2C7displayEv>:
     56c:	fc 01       	movw	r30, r24
     56e:	64 81       	ldd	r22, Z+4	; 0x04
     570:	26 2f       	mov	r18, r22
     572:	24 60       	ori	r18, 0x04	; 4
     574:	24 83       	std	Z+4, r18	; 0x04
     576:	6c 60       	ori	r22, 0x0C	; 12
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN17LiquidCrystal_I2C4sendEhh>
     57e:	08 95       	ret

00000580 <_ZN17LiquidCrystal_I2C5writeEh>:
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN17LiquidCrystal_I2C4sendEhh>
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	08 95       	ret

0000058a <_ZN17LiquidCrystal_I2C5beginEv>:
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	e0 e3       	ldi	r30, 0x30	; 48
     592:	f0 e2       	ldi	r31, 0x20	; 32
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 87       	std	Z+8, r24	; 0x08
     598:	80 ea       	ldi	r24, 0xA0	; 160
     59a:	96 e8       	ldi	r25, 0x86	; 134
     59c:	a1 e0       	ldi	r26, 0x01	; 1
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	80 83       	st	Z, r24
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	a2 83       	std	Z+2, r26	; 0x02
     5a6:	b3 83       	std	Z+3, r27	; 0x03
     5a8:	85 e0       	ldi	r24, 0x05	; 5
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	a0 e0       	ldi	r26, 0x00	; 0
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	84 83       	std	Z+4, r24	; 0x04
     5b2:	95 83       	std	Z+5, r25	; 0x05
     5b4:	a6 83       	std	Z+6, r26	; 0x06
     5b6:	b7 83       	std	Z+7, r27	; 0x07
     5b8:	e0 e8       	ldi	r30, 0x80	; 128
     5ba:	f4 e0       	ldi	r31, 0x04	; 4
     5bc:	81 81       	ldd	r24, Z+1	; 0x01
     5be:	88 60       	ori	r24, 0x08	; 8
     5c0:	81 83       	std	Z+1, r24	; 0x01
     5c2:	60 e3       	ldi	r22, 0x30	; 48
     5c4:	70 e2       	ldi	r23, 0x20	; 32
     5c6:	80 e8       	ldi	r24, 0x80	; 128
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	0e 94 2c 06 	call	0xc58	; 0xc58 <twi_master_init>
     5ce:	1b 82       	std	Y+3, r1	; 0x03
     5d0:	8f 81       	ldd	r24, Y+7	; 0x07
     5d2:	82 30       	cpi	r24, 0x02	; 2
     5d4:	10 f0       	brcs	.+4      	; 0x5da <_ZN17LiquidCrystal_I2C5beginEv+0x50>
     5d6:	98 e0       	ldi	r25, 0x08	; 8
     5d8:	9b 83       	std	Y+3, r25	; 0x03
     5da:	98 85       	ldd	r25, Y+8	; 0x08
     5dc:	99 23       	and	r25, r25
     5de:	29 f0       	breq	.+10     	; 0x5ea <_ZN17LiquidCrystal_I2C5beginEv+0x60>
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	19 f4       	brne	.+6      	; 0x5ea <_ZN17LiquidCrystal_I2C5beginEv+0x60>
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	84 60       	ori	r24, 0x04	; 4
     5e8:	8b 83       	std	Y+3, r24	; 0x03
     5ea:	83 ed       	ldi	r24, 0xD3	; 211
     5ec:	90 e3       	ldi	r25, 0x30	; 48
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <_ZN17LiquidCrystal_I2C5beginEv+0x64>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <_ZN17LiquidCrystal_I2C5beginEv+0x6a>
     5f4:	00 00       	nop
     5f6:	69 85       	ldd	r22, Y+9	; 0x09
     5f8:	ce 01       	movw	r24, r28
     5fa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     5fe:	9f e3       	ldi	r25, 0x3F	; 63
     600:	2d e0       	ldi	r18, 0x0D	; 13
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	91 50       	subi	r25, 0x01	; 1
     606:	20 40       	sbci	r18, 0x00	; 0
     608:	80 40       	sbci	r24, 0x00	; 0
     60a:	e1 f7       	brne	.-8      	; 0x604 <_ZN17LiquidCrystal_I2C5beginEv+0x7a>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <_ZN17LiquidCrystal_I2C5beginEv+0x84>
     60e:	00 00       	nop
     610:	60 e3       	ldi	r22, 0x30	; 48
     612:	ce 01       	movw	r24, r28
     614:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN17LiquidCrystal_I2C10write4bitsEh>
     618:	84 e6       	ldi	r24, 0x64	; 100
     61a:	94 e0       	ldi	r25, 0x04	; 4
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <_ZN17LiquidCrystal_I2C5beginEv+0x92>
     620:	00 c0       	rjmp	.+0      	; 0x622 <_ZN17LiquidCrystal_I2C5beginEv+0x98>
     622:	00 00       	nop
     624:	60 e3       	ldi	r22, 0x30	; 48
     626:	ce 01       	movw	r24, r28
     628:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN17LiquidCrystal_I2C10write4bitsEh>
     62c:	84 e6       	ldi	r24, 0x64	; 100
     62e:	94 e0       	ldi	r25, 0x04	; 4
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <_ZN17LiquidCrystal_I2C5beginEv+0xa6>
     634:	00 c0       	rjmp	.+0      	; 0x636 <_ZN17LiquidCrystal_I2C5beginEv+0xac>
     636:	00 00       	nop
     638:	60 e3       	ldi	r22, 0x30	; 48
     63a:	ce 01       	movw	r24, r28
     63c:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN17LiquidCrystal_I2C10write4bitsEh>
     640:	92 e3       	ldi	r25, 0x32	; 50
     642:	9a 95       	dec	r25
     644:	f1 f7       	brne	.-4      	; 0x642 <_ZN17LiquidCrystal_I2C5beginEv+0xb8>
     646:	60 e2       	ldi	r22, 0x20	; 32
     648:	ce 01       	movw	r24, r28
     64a:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN17LiquidCrystal_I2C10write4bitsEh>
     64e:	6b 81       	ldd	r22, Y+3	; 0x03
     650:	60 62       	ori	r22, 0x20	; 32
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	ce 01       	movw	r24, r28
     656:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN17LiquidCrystal_I2C4sendEhh>
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	8c 83       	std	Y+4, r24	; 0x04
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN17LiquidCrystal_I2C7displayEv>
     664:	ce 01       	movw	r24, r28
     666:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN17LiquidCrystal_I2C5clearEv>
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	8d 83       	std	Y+5, r24	; 0x05
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	66 e0       	ldi	r22, 0x06	; 6
     672:	ce 01       	movw	r24, r28
     674:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN17LiquidCrystal_I2C4sendEhh>
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN17LiquidCrystal_I2C4homeEv>
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
}

void LiquidCrystal_I2C::setBacklight(uint8_t new_val){
	if (new_val) {
     684:	66 23       	and	r22, r22
     686:	19 f0       	breq	.+6      	; 0x68e <_ZN17LiquidCrystal_I2C12setBacklightEh+0xa>
		backlight();		// turn backlight on
     688:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN17LiquidCrystal_I2C9backlightEv>
     68c:	08 95       	ret
	} else {
		noBacklight();		// turn backlight off
     68e:	0e 94 89 01 	call	0x312	; 0x312 <_ZN17LiquidCrystal_I2C11noBacklightEv>
     692:	08 95       	ret

00000694 <main>:


#include <stdio.h>

int main(void)
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	6f 97       	sbiw	r28, 0x1f	; 31
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	de bf       	out	0x3e, r29	; 62
	char MESSAGE[15] = "Push Button To";
     6a2:	8f e0       	ldi	r24, 0x0F	; 15
     6a4:	ea e1       	ldi	r30, 0x1A	; 26
     6a6:	f0 e2       	ldi	r31, 0x20	; 32
     6a8:	de 01       	movw	r26, r28
     6aa:	11 96       	adiw	r26, 0x01	; 1
     6ac:	01 90       	ld	r0, Z+
     6ae:	0d 92       	st	X+, r0
     6b0:	8a 95       	dec	r24
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <main+0x18>
	char MESSAGE_2[6] = "Start";
     6b4:	86 e0       	ldi	r24, 0x06	; 6
     6b6:	e9 e2       	ldi	r30, 0x29	; 41
     6b8:	f0 e2       	ldi	r31, 0x20	; 32
     6ba:	de 01       	movw	r26, r28
     6bc:	50 96       	adiw	r26, 0x10	; 16
     6be:	01 90       	ld	r0, Z+
     6c0:	0d 92       	st	X+, r0
     6c2:	8a 95       	dec	r24
     6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0x2a>

	uint16_t length = sizeof(MESSAGE)-1;
	uint16_t length_2 = sizeof(MESSAGE_2)-1;

	
	LiquidCrystal_I2C lcd(0x3F,16,2); //address of device, no. rows, no. columns. All start at 0.
     6c6:	00 e0       	ldi	r16, 0x00	; 0
     6c8:	22 e0       	ldi	r18, 0x02	; 2
     6ca:	40 e1       	ldi	r20, 0x10	; 16
     6cc:	6f e3       	ldi	r22, 0x3F	; 63
     6ce:	ce 01       	movw	r24, r28
     6d0:	46 96       	adiw	r24, 0x16	; 22
     6d2:	0e 94 28 01 	call	0x250	; 0x250 <_ZN17LiquidCrystal_I2CC1Ehhhh>
	lcd.begin();
     6d6:	ce 01       	movw	r24, r28
     6d8:	46 96       	adiw	r24, 0x16	; 22
     6da:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN17LiquidCrystal_I2C5beginEv>
	lcd.clear();
     6de:	ce 01       	movw	r24, r28
     6e0:	46 96       	adiw	r24, 0x16	; 22
     6e2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN17LiquidCrystal_I2C5clearEv>
	lcd.setBacklight(1);
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	ce 01       	movw	r24, r28
     6ea:	46 96       	adiw	r24, 0x16	; 22
     6ec:	0e 94 42 03 	call	0x684	; 0x684 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	lcd.setCursor(0,0); //row,column
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	ce 01       	movw	r24, r28
     6f6:	46 96       	adiw	r24, 0x16	; 22
     6f8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.printMessage(&MESSAGE[0],length);
     6fc:	4e e0       	ldi	r20, 0x0E	; 14
     6fe:	be 01       	movw	r22, r28
     700:	6f 5f       	subi	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	ce 01       	movw	r24, r28
     706:	46 96       	adiw	r24, 0x16	; 22
     708:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN17LiquidCrystal_I2C12printMessageEPch>
	lcd.setCursor(5,1);
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	65 e0       	ldi	r22, 0x05	; 5
     710:	ce 01       	movw	r24, r28
     712:	46 96       	adiw	r24, 0x16	; 22
     714:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.printMessage(&MESSAGE_2[0],length_2);
     718:	45 e0       	ldi	r20, 0x05	; 5
     71a:	be 01       	movw	r22, r28
     71c:	60 5f       	subi	r22, 0xF0	; 240
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	ce 01       	movw	r24, r28
     722:	46 96       	adiw	r24, 0x16	; 22
     724:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN17LiquidCrystal_I2C12printMessageEPch>
	
	Lid_Init();
     728:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z8Lid_Initv>
	Roller_Init();
     72c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_Z11Roller_Initv>
	//for L.S#1
	PORTA.DIRCLR=PIN7_bm; //set PinA7 as input- Limit Switch 1
     730:	e0 e0       	ldi	r30, 0x00	; 0
     732:	f6 e0       	ldi	r31, 0x06	; 6
     734:	80 e8       	ldi	r24, 0x80	; 128
     736:	82 83       	std	Z+2, r24	; 0x02
	PORTA.OUTSET=PIN7_bm; //set the initial value of PinA7 as high- Limit Switch
     738:	85 83       	std	Z+5, r24	; 0x05
	
	//for L.S#2
	PORTA.DIRCLR=PIN6_bm; //set PinA7 as input- Limit Switch 1
     73a:	80 e4       	ldi	r24, 0x40	; 64
     73c:	82 83       	std	Z+2, r24	; 0x02
	PORTA.OUTSET=PIN6_bm; //set the initial value of PinA7 as high- Limit Switch
     73e:	85 83       	std	Z+5, r24	; 0x05
	
	//for Pushbutton
	PORTB.DIRCLR=PIN3_bm; //set PinB3 as input- Pushbutton
     740:	e0 e2       	ldi	r30, 0x20	; 32
     742:	f6 e0       	ldi	r31, 0x06	; 6
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	82 83       	std	Z+2, r24	; 0x02
	PORTB.OUTSET=PIN3_bm; //set the initial value of PinB3 as high- Pushbutton
     748:	85 83       	std	Z+5, r24	; 0x05
	
	//for Breakbeam
	PORTB_IN=PIN2_bm; //set PinB2 as input. - Breakbeam
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
		
	//for Solenoid	
	PORTB_DIRSET=PIN0_bm; //set PinB0 as output. -Solenoid
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	uint32_t cooling_time; //set variable cooling_time
	uint16_t  state; //set state variable
	uint16_t previous_state;
	
	cooling_time=0;
	state=0;
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
	
	uint32_t cooling_time; //set variable cooling_time
	uint16_t  state; //set state variable
	uint16_t previous_state;
	
	cooling_time=0;
     75a:	41 2c       	mov	r4, r1
     75c:	51 2c       	mov	r5, r1
     75e:	32 01       	movw	r6, r4
		
		
		//state to check for when limit switch is pressed (lid fully open)
		while (state==8)
		{
			if (PORTA.IN & PIN6_bm) //L.S 2->Lid Limit Switch
     760:	0f 2e       	mov	r0, r31
     762:	a1 2c       	mov	r10, r1
     764:	f6 e0       	ldi	r31, 0x06	; 6
     766:	bf 2e       	mov	r11, r31
     768:	f0 2d       	mov	r31, r0
			{
				PORTA.OUTCLR=PIN6_bm; //set the initial value of PinA6 as 0 (Pushbutton)
     76a:	68 94       	set
     76c:	ee 24       	eor	r14, r14
     76e:	e6 f8       	bld	r14, 6
			break;
		}
		
		while (state==2)
		{
			if ((PORTB.IN & PIN2_bm)) //checks for if can has finished falling through
     770:	00 e2       	ldi	r16, 0x20	; 32
     772:	16 e0       	ldi	r17, 0x06	; 6
			{
				state=3;
				PORTB_OUTCLR=PIN0_bm; //closes the solenoid
     774:	0f 2e       	mov	r0, r31
     776:	f6 e2       	ldi	r31, 0x26	; 38
     778:	cf 2e       	mov	r12, r31
     77a:	f6 e0       	ldi	r31, 0x06	; 6
     77c:	df 2e       	mov	r13, r31
     77e:	f0 2d       	mov	r31, r0
     780:	ff 24       	eor	r15, r15
     782:	f3 94       	inc	r15
		//init state waiting for pushbutton to be pressed
		while (state==1)
		{
			if (!(PORTB.IN & PIN3_bm))
			{
				PORTB_OUTSET=PIN0_bm; //opens solenoid to allow can to fall through
     784:	0f 2e       	mov	r0, r31
     786:	f5 e2       	ldi	r31, 0x25	; 37
     788:	8f 2e       	mov	r8, r31
     78a:	f6 e0       	ldi	r31, 0x06	; 6
     78c:	9f 2e       	mov	r9, r31
     78e:	f0 2d       	mov	r31, r0
	previous_state=0;

    while (1) 
    {
		//init state stopping both motors
		while (state==0)
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	09 f5       	brne	.+66     	; 0x7d6 <main+0x142>
		{
			lcd.setCursor(0,0); //row,column
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	ce 01       	movw	r24, r28
     79a:	46 96       	adiw	r24, 0x16	; 22
     79c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.printMessage(&MESSAGE[0],length);
     7a0:	4e e0       	ldi	r20, 0x0E	; 14
     7a2:	be 01       	movw	r22, r28
     7a4:	6f 5f       	subi	r22, 0xFF	; 255
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	ce 01       	movw	r24, r28
     7aa:	46 96       	adiw	r24, 0x16	; 22
     7ac:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN17LiquidCrystal_I2C12printMessageEPch>
			lcd.setCursor(5,1);
     7b0:	4f 2d       	mov	r20, r15
     7b2:	65 e0       	ldi	r22, 0x05	; 5
     7b4:	ce 01       	movw	r24, r28
     7b6:	46 96       	adiw	r24, 0x16	; 22
     7b8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.printMessage(&MESSAGE_2[0],length_2);
     7bc:	45 e0       	ldi	r20, 0x05	; 5
     7be:	be 01       	movw	r22, r28
     7c0:	60 5f       	subi	r22, 0xF0	; 240
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	ce 01       	movw	r24, r28
     7c6:	46 96       	adiw	r24, 0x16	; 22
     7c8:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN17LiquidCrystal_I2C12printMessageEPch>
			Lid_Stop();
     7cc:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z8Lid_Stopv>
			Roller_Stop();
     7d0:	0e 94 06 05 	call	0xa0c	; 0xa0c <_Z11Roller_Stopv>
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <main+0x148>
			state=1;
			break;
		}
		
		//init state waiting for pushbutton to be pressed
		while (state==1)
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	91 05       	cpc	r25, r1
     7da:	81 f4       	brne	.+32     	; 0x7fc <main+0x168>
		{
			if (!(PORTB.IN & PIN3_bm))
     7dc:	f8 01       	movw	r30, r16
     7de:	80 85       	ldd	r24, Z+8	; 0x08
     7e0:	83 fd       	sbrc	r24, 3
     7e2:	4c c0       	rjmp	.+152    	; 0x87c <main+0x1e8>
			{
				PORTB_OUTSET=PIN0_bm; //opens solenoid to allow can to fall through
     7e4:	f4 01       	movw	r30, r8
     7e6:	f0 82       	st	Z, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e8:	ff ef       	ldi	r31, 0xFF	; 255
     7ea:	21 ee       	ldi	r18, 0xE1	; 225
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	f1 50       	subi	r31, 0x01	; 1
     7f0:	20 40       	sbci	r18, 0x00	; 0
     7f2:	80 40       	sbci	r24, 0x00	; 0
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x15a>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <main+0x164>
     7f8:	00 00       	nop
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <main+0x16e>
				state=1;
			} //pass
			break;
		}
		
		while (state==2)
     7fc:	82 30       	cpi	r24, 0x02	; 2
     7fe:	91 05       	cpc	r25, r1
     800:	61 f4       	brne	.+24     	; 0x81a <main+0x186>
		{
			if ((PORTB.IN & PIN2_bm)) //checks for if can has finished falling through
     802:	f8 01       	movw	r30, r16
     804:	80 85       	ldd	r24, Z+8	; 0x08
     806:	82 ff       	sbrs	r24, 2
     808:	03 c0       	rjmp	.+6      	; 0x810 <main+0x17c>
			{
				state=3;
				PORTB_OUTCLR=PIN0_bm; //closes the solenoid
     80a:	f6 01       	movw	r30, r12
     80c:	f0 82       	st	Z, r15
     80e:	08 c0       	rjmp	.+16     	; 0x820 <main+0x18c>
			}
			else
			{
				lcd.printTemp();
     810:	ce 01       	movw	r24, r28
     812:	46 96       	adiw	r24, 0x16	; 22
     814:	0e 94 13 02 	call	0x426	; 0x426 <_ZN17LiquidCrystal_I2C9printTempEv>
     818:	f4 cf       	rjmp	.-24     	; 0x802 <main+0x16e>
			}
		}
		
		
		//state to run the lid motor
		while (state==3)
     81a:	83 30       	cpi	r24, 0x03	; 3
     81c:	91 05       	cpc	r25, r1
     81e:	39 f4       	brne	.+14     	; 0x82e <main+0x19a>
		{
			lcd.clear();
     820:	ce 01       	movw	r24, r28
     822:	46 96       	adiw	r24, 0x16	; 22
     824:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN17LiquidCrystal_I2C5clearEv>
			Lid_Rotate();
     828:	0e 94 88 04 	call	0x910	; 0x910 <_Z10Lid_Rotatev>
     82c:	03 c0       	rjmp	.+6      	; 0x834 <main+0x1a0>
			state=4;
			break;
		}
		
		//state that checks for limit switch to be pressed
		while (state==4)
     82e:	84 30       	cpi	r24, 0x04	; 4
     830:	91 05       	cpc	r25, r1
     832:	b9 f4       	brne	.+46     	; 0x862 <main+0x1ce>
		{
			if (PORTA.IN & PIN7_bm) //L.S 1->Roller Limit Switch
     834:	f5 01       	movw	r30, r10
     836:	80 85       	ldd	r24, Z+8	; 0x08
     838:	88 23       	and	r24, r24
     83a:	64 f4       	brge	.+24     	; 0x854 <main+0x1c0>
			{
				Lid_Stop();
     83c:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z8Lid_Stopv>
     840:	ff ef       	ldi	r31, 0xFF	; 255
     842:	23 ec       	ldi	r18, 0xC3	; 195
     844:	89 e0       	ldi	r24, 0x09	; 9
     846:	f1 50       	subi	r31, 0x01	; 1
     848:	20 40       	sbci	r18, 0x00	; 0
     84a:	80 40       	sbci	r24, 0x00	; 0
     84c:	e1 f7       	brne	.-8      	; 0x846 <main+0x1b2>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <main+0x1bc>
     850:	00 00       	nop
     852:	0a c0       	rjmp	.+20     	; 0x868 <main+0x1d4>
				state=5;
				_delay_ms(100);
			}
			else
			{
				lcd.printTemp();
     854:	ce 01       	movw	r24, r28
     856:	46 96       	adiw	r24, 0x16	; 22
     858:	0e 94 13 02 	call	0x426	; 0x426 <_ZN17LiquidCrystal_I2C9printTempEv>
				state=4;
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	33 c0       	rjmp	.+102    	; 0x8c8 <main+0x234>
			break;
		}
		
		
		//state to run the roller motor
		while (state==5)
     862:	85 30       	cpi	r24, 0x05	; 5
     864:	91 05       	cpc	r25, r1
     866:	61 f4       	brne	.+24     	; 0x880 <main+0x1ec>
		{
			lcd.clear();
     868:	ce 01       	movw	r24, r28
     86a:	46 96       	adiw	r24, 0x16	; 22
     86c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN17LiquidCrystal_I2C5clearEv>
			Roller_Rotate();
     870:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_Z13Roller_Rotatev>
			cooling_time=0;
     874:	41 2c       	mov	r4, r1
     876:	51 2c       	mov	r5, r1
     878:	32 01       	movw	r6, r4
     87a:	13 c0       	rjmp	.+38     	; 0x8a2 <main+0x20e>
				_delay_ms(50); //allows the can to start falling through before checking breakbeam
				state=2;
			}
			else
			{
				state=1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
			state=6;
			break;
		}
		
		//state that runs for 30s before stopping roller motors and transitioning to opening lid
		while (state==6)
     880:	86 30       	cpi	r24, 0x06	; 6
     882:	91 05       	cpc	r25, r1
     884:	51 f4       	brne	.+20     	; 0x89a <main+0x206>
		{
			if (cooling_time>330)
     886:	9b e4       	ldi	r25, 0x4B	; 75
     888:	49 16       	cp	r4, r25
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	59 06       	cpc	r5, r25
     88e:	61 04       	cpc	r6, r1
     890:	71 04       	cpc	r7, r1
     892:	38 f0       	brcs	.+14     	; 0x8a2 <main+0x20e>
			{
				Roller_Stop();
     894:	0e 94 06 05 	call	0xa0c	; 0xa0c <_Z11Roller_Stopv>
     898:	10 c0       	rjmp	.+32     	; 0x8ba <main+0x226>
			break;
		}
		
		
		//state to open the lid up
		while (state==7)
     89a:	87 30       	cpi	r24, 0x07	; 7
     89c:	91 05       	cpc	r25, r1
     89e:	69 f0       	breq	.+26     	; 0x8ba <main+0x226>
     8a0:	13 c0       	rjmp	.+38     	; 0x8c8 <main+0x234>
				Roller_Stop();
				state=7;
			}
			else
			{
				lcd.printTemp();
     8a2:	ce 01       	movw	r24, r28
     8a4:	46 96       	adiw	r24, 0x16	; 22
     8a6:	0e 94 13 02 	call	0x426	; 0x426 <_ZN17LiquidCrystal_I2C9printTempEv>
				cooling_time++;
     8aa:	ef ef       	ldi	r30, 0xFF	; 255
     8ac:	4e 1a       	sub	r4, r30
     8ae:	5e 0a       	sbc	r5, r30
     8b0:	6e 0a       	sbc	r6, r30
     8b2:	7e 0a       	sbc	r7, r30
				state=6;
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	6b cf       	rjmp	.-298    	; 0x790 <main+0xfc>
		
		
		//state to open the lid up
		while (state==7)
		{
			lcd.clear();
     8ba:	ce 01       	movw	r24, r28
     8bc:	46 96       	adiw	r24, 0x16	; 22
     8be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN17LiquidCrystal_I2C5clearEv>
			Lid_Rotate();
     8c2:	0e 94 88 04 	call	0x910	; 0x910 <_Z10Lid_Rotatev>
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <main+0x23c>
			state=8;
		}
		
		
		//state to check for when limit switch is pressed (lid fully open)
		while (state==8)
     8c8:	88 30       	cpi	r24, 0x08	; 8
     8ca:	91 05       	cpc	r25, r1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <main+0x23c>
     8ce:	60 cf       	rjmp	.-320    	; 0x790 <main+0xfc>
		{
			if (PORTA.IN & PIN6_bm) //L.S 2->Lid Limit Switch
     8d0:	f5 01       	movw	r30, r10
     8d2:	80 85       	ldd	r24, Z+8	; 0x08
     8d4:	86 ff       	sbrs	r24, 6
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <main+0x258>
			{
				PORTA.OUTCLR=PIN6_bm; //set the initial value of PinA6 as 0 (Pushbutton)
     8d8:	e6 82       	std	Z+6, r14	; 0x06
				Lid_Stop();
     8da:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z8Lid_Stopv>
				state=0;
				lcd.clear();
     8de:	ce 01       	movw	r24, r28
     8e0:	46 96       	adiw	r24, 0x16	; 22
     8e2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN17LiquidCrystal_I2C5clearEv>
		{
			if (PORTA.IN & PIN6_bm) //L.S 2->Lid Limit Switch
			{
				PORTA.OUTCLR=PIN6_bm; //set the initial value of PinA6 as 0 (Pushbutton)
				Lid_Stop();
				state=0;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	52 cf       	rjmp	.-348    	; 0x790 <main+0xfc>
				lcd.clear();
			}
			else
			{
				lcd.printTemp();
     8ec:	ce 01       	movw	r24, r28
     8ee:	46 96       	adiw	r24, 0x16	; 22
     8f0:	0e 94 13 02 	call	0x426	; 0x426 <_ZN17LiquidCrystal_I2C9printTempEv>
				state=8;
     8f4:	88 e0       	ldi	r24, 0x08	; 8
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	4b cf       	rjmp	.-362    	; 0x790 <main+0xfc>

000008fa <_Z8Lid_Initv>:


void Lid_Init(void)
{
	//for motor 1 (lid motor)
	PORTC_DIRSET=PIN2_bm; //set PinC2 as output (pwmb)
     8fa:	e1 e4       	ldi	r30, 0x41	; 65
     8fc:	f6 e0       	ldi	r31, 0x06	; 6
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	80 83       	st	Z, r24
	PORTD_DIRSET=PIN7_bm; //set PinD7 as output (bin2)
     902:	80 e8       	ldi	r24, 0x80	; 128
     904:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	PORTC_DIRSET=PIN7_bm; //set PinC7 as output (bin1)
     908:	80 83       	st	Z, r24
	PORTC_DIRSET=PIN6_bm; //set PinC6 as output (stby1)
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	80 83       	st	Z, r24
     90e:	08 95       	ret

00000910 <_Z10Lid_Rotatev>:
}

void Lid_Rotate(void)
{
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	27 97       	sbiw	r28, 0x07	; 7
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	de bf       	out	0x3e, r29	; 62
	struct pwm_config pwm_cfg_1;
	//sysclk_init();
	pwm_init(&pwm_cfg_1, PWM_TCC0, PWM_CH_C, 500);
     91e:	24 ef       	ldi	r18, 0xF4	; 244
     920:	31 e0       	ldi	r19, 0x01	; 1
     922:	43 e0       	ldi	r20, 0x03	; 3
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	ce 01       	movw	r24, r28
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <pwm_init>
	
	PORTC_OUTSET=PIN2_bm; //set PinC2 as high (pwmb)
     92e:	e5 e4       	ldi	r30, 0x45	; 69
     930:	f6 e0       	ldi	r31, 0x06	; 6
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	80 83       	st	Z, r24
	PORTD_OUTSET=PIN7_bm; //set PinD7 as high (bin2)
     936:	80 e8       	ldi	r24, 0x80	; 128
     938:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	PORTC_OUTCLR=PIN7_bm; //set PinC7 as low (bin1)
     93c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	PORTC_OUTSET=PIN6_bm; //set PinC6 as high (stby1)
     940:	80 e4       	ldi	r24, 0x40	; 64
     942:	80 83       	st	Z, r24
	
	pwm_start(&pwm_cfg_1, 50); //start pwm with 50% duty cycle
     944:	62 e3       	ldi	r22, 0x32	; 50
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <pwm_start>
}
     94e:	27 96       	adiw	r28, 0x07	; 7
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <_Z8Lid_Stopv>:

void Lid_Stop(void)
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	27 97       	sbiw	r28, 0x07	; 7
     964:	cd bf       	out	0x3d, r28	; 61
     966:	de bf       	out	0x3e, r29	; 62
	struct pwm_config pwm_cfg_1;
	//sysclk_init();
	pwm_init(&pwm_cfg_1, PWM_TCC0, PWM_CH_C, 500);
     968:	24 ef       	ldi	r18, 0xF4	; 244
     96a:	31 e0       	ldi	r19, 0x01	; 1
     96c:	43 e0       	ldi	r20, 0x03	; 3
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <pwm_init>
	
	PORTC_OUTSET=PIN2_bm; //set PinC2 as high (pwmb)
     978:	e5 e4       	ldi	r30, 0x45	; 69
     97a:	f6 e0       	ldi	r31, 0x06	; 6
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	80 83       	st	Z, r24
	PORTD_OUTCLR=PIN7_bm; //set PinD7 as high (bin2)
     980:	80 e8       	ldi	r24, 0x80	; 128
     982:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	PORTC_OUTCLR=PIN7_bm; //set PinC7 as low (bin1)
     986:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	PORTC_OUTSET=PIN6_bm; //set PinC6 as high (stby1)
     98a:	80 e4       	ldi	r24, 0x40	; 64
     98c:	80 83       	st	Z, r24
 *
 * \param *config           Pointer to the PWM configuration struct
 */
static inline void pwm_stop(struct pwm_config *config)
{
	tc_write_clock_source(config->tc, TC_CLKSEL_OFF_gc);
     98e:	e9 81       	ldd	r30, Y+1	; 0x01
     990:	fa 81       	ldd	r31, Y+2	; 0x02
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     992:	80 81       	ld	r24, Z
			TC_CLKSEL_enum;
     994:	80 7f       	andi	r24, 0xF0	; 240
     996:	80 83       	st	Z, r24
 * \param *config           Pointer to the PWM configuration struct
 */
static inline void pwm_disable(struct pwm_config *config)
{
	pwm_stop(config);
	tc_disable(config->tc);
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <tc_disable>
	
	//pwm_start(&pwm_cfg_1, 0); //start pwm with 0% duty cycle
	pwm_disable(&pwm_cfg_1);
}
     9a0:	27 96       	adiw	r28, 0x07	; 7
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <_Z11Roller_Initv>:

void Roller_Init(void)
{
	//for motor 2 (roller motor)
	PORTD_DIRSET=PIN0_bm; //set PinD0 as output (pwma)
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	PORTE_DIRSET=PIN2_bm; //set PinE2 as output (ain2)
     9b2:	e1 e8       	ldi	r30, 0x81	; 129
     9b4:	f6 e0       	ldi	r31, 0x06	; 6
     9b6:	94 e0       	ldi	r25, 0x04	; 4
     9b8:	90 83       	st	Z, r25
	PORTE_DIRSET=PIN1_bm; //set PinE1 as output (ain1)
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	90 83       	st	Z, r25
	PORTE_DIRSET=PIN0_bm; //set PinE0 as output (stby)
     9be:	80 83       	st	Z, r24
     9c0:	08 95       	ret

000009c2 <_Z13Roller_Rotatev>:
}

void Roller_Rotate(void)
{
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	27 97       	sbiw	r28, 0x07	; 7
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	de bf       	out	0x3e, r29	; 62
	struct pwm_config pwm_cfg_2;
	//sysclk_init();
	pwm_init(&pwm_cfg_2, PWM_TCD0, PWM_CH_A, 500);
     9d0:	24 ef       	ldi	r18, 0xF4	; 244
     9d2:	31 e0       	ldi	r19, 0x01	; 1
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	62 e0       	ldi	r22, 0x02	; 2
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <pwm_init>
	
	PORTD_OUTSET=PIN0_bm; //set PinD0 as high (pwm)
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	PORTE_OUTSET=PIN2_bm; //set PinE2 as high (ain2)
     9e6:	e5 e8       	ldi	r30, 0x85	; 133
     9e8:	f6 e0       	ldi	r31, 0x06	; 6
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	90 83       	st	Z, r25
	PORTE_OUTCLR=PIN1_bm; //set PinE1 as low (ain1)
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	PORTE_OUTSET=PIN0_bm; //set PinE0 as high (stby)
     9f4:	80 83       	st	Z, r24
	
	pwm_start(&pwm_cfg_2, 95); //start pwm with 90% duty cycle
     9f6:	6f e5       	ldi	r22, 0x5F	; 95
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <pwm_start>
}
     a00:	27 96       	adiw	r28, 0x07	; 7
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <_Z11Roller_Stopv>:

void Roller_Stop(void)
{
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	27 97       	sbiw	r28, 0x07	; 7
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	de bf       	out	0x3e, r29	; 62
	struct pwm_config pwm_cfg_2;
	//sysclk_init();
	pwm_init(&pwm_cfg_2, PWM_TCD0, PWM_CH_A, 500);
     a1a:	24 ef       	ldi	r18, 0xF4	; 244
     a1c:	31 e0       	ldi	r19, 0x01	; 1
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	62 e0       	ldi	r22, 0x02	; 2
     a22:	ce 01       	movw	r24, r28
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <pwm_init>
	
	PORTD_OUTSET=PIN0_bm; //set PinD0 as high (pwm)
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	PORTE_OUTCLR=PIN2_bm; //set PinE2 as high (ain2)
     a30:	e6 e8       	ldi	r30, 0x86	; 134
     a32:	f6 e0       	ldi	r31, 0x06	; 6
     a34:	94 e0       	ldi	r25, 0x04	; 4
     a36:	90 83       	st	Z, r25
	PORTE_OUTCLR=PIN1_bm; //set PinE1 as low (ain1)
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	90 83       	st	Z, r25
	PORTE_OUTSET=PIN0_bm; //set PinE0 as high (stby)
     a3c:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 *
 * \param *config           Pointer to the PWM configuration struct
 */
static inline void pwm_stop(struct pwm_config *config)
{
	tc_write_clock_source(config->tc, TC_CLKSEL_OFF_gc);
     a40:	e9 81       	ldd	r30, Y+1	; 0x01
     a42:	fa 81       	ldd	r31, Y+2	; 0x02
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     a44:	80 81       	ld	r24, Z
			TC_CLKSEL_enum;
     a46:	80 7f       	andi	r24, 0xF0	; 240
     a48:	80 83       	st	Z, r24
 * \param *config           Pointer to the PWM configuration struct
 */
static inline void pwm_disable(struct pwm_config *config)
{
	pwm_stop(config);
	tc_disable(config->tc);
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <tc_disable>
	
	//pwm_start(&pwm_cfg_2, 0); //start pwm with 0% duty cycle
	pwm_disable(&pwm_cfg_2);
     a52:	27 96       	adiw	r28, 0x07	; 7
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     a62:	e0 91 39 20 	lds	r30, 0x2039	; 0x802039 <transfer>
     a66:	f0 91 3a 20 	lds	r31, 0x203A	; 0x80203a <transfer+0x1>
     a6a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     a6c:	83 ff       	sbrs	r24, 3
     a6e:	08 c0       	rjmp	.+16     	; 0xa80 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     a70:	88 60       	ori	r24, 0x08	; 8
     a72:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     a78:	86 ef       	ldi	r24, 0xF6	; 246
     a7a:	80 93 43 20 	sts	0x2043, r24	; 0x802043 <transfer+0xa>
     a7e:	83 c0       	rjmp	.+262    	; 0xb86 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     a80:	98 2f       	mov	r25, r24
     a82:	94 71       	andi	r25, 0x14	; 20
     a84:	31 f0       	breq	.+12     	; 0xa92 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	80 93 43 20 	sts	0x2043, r24	; 0x802043 <transfer+0xa>
     a90:	7a c0       	rjmp	.+244    	; 0xb86 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     a92:	86 ff       	sbrs	r24, 6
     a94:	43 c0       	rjmp	.+134    	; 0xb1c <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     a96:	c9 e3       	ldi	r28, 0x39	; 57
     a98:	d0 e2       	ldi	r29, 0x20	; 32
     a9a:	aa 81       	ldd	r26, Y+2	; 0x02
     a9c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     a9e:	8c 81       	ldd	r24, Y+4	; 0x04
     aa0:	9d 81       	ldd	r25, Y+5	; 0x05
     aa2:	14 96       	adiw	r26, 0x04	; 4
     aa4:	2d 91       	ld	r18, X+
     aa6:	3c 91       	ld	r19, X
     aa8:	15 97       	sbiw	r26, 0x05	; 5
     aaa:	82 17       	cp	r24, r18
     aac:	93 07       	cpc	r25, r19
     aae:	6c f4       	brge	.+26     	; 0xaca <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     ab0:	9c 01       	movw	r18, r24
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	20 93 3d 20 	sts	0x203D, r18	; 0x80203d <transfer+0x4>
     aba:	30 93 3e 20 	sts	0x203E, r19	; 0x80203e <transfer+0x5>
     abe:	a8 0f       	add	r26, r24
     ac0:	b9 1f       	adc	r27, r25
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	8c 91       	ld	r24, X
     ac6:	87 83       	std	Z+7, r24	; 0x07
     ac8:	5e c0       	rjmp	.+188    	; 0xb86 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     aca:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <transfer+0x6>
     ace:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <transfer+0x7>
     ad2:	18 96       	adiw	r26, 0x08	; 8
     ad4:	2d 91       	ld	r18, X+
     ad6:	3c 91       	ld	r19, X
     ad8:	19 97       	sbiw	r26, 0x09	; 9
     ada:	82 17       	cp	r24, r18
     adc:	93 07       	cpc	r25, r19
     ade:	c8 f4       	brcc	.+50     	; 0xb12 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     ae0:	20 91 41 20 	lds	r18, 0x2041	; 0x802041 <transfer+0x8>
     ae4:	22 23       	and	r18, r18
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     ae8:	86 81       	ldd	r24, Z+6	; 0x06
     aea:	81 60       	ori	r24, 0x01	; 1
     aec:	86 83       	std	Z+6, r24	; 0x06
     aee:	4b c0       	rjmp	.+150    	; 0xb86 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     af0:	16 96       	adiw	r26, 0x06	; 6
     af2:	2d 91       	ld	r18, X+
     af4:	3c 91       	ld	r19, X
     af6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     af8:	ac 01       	movw	r20, r24
     afa:	4f 5f       	subi	r20, 0xFF	; 255
     afc:	5f 4f       	sbci	r21, 0xFF	; 255
     afe:	40 93 3f 20 	sts	0x203F, r20	; 0x80203f <transfer+0x6>
     b02:	50 93 40 20 	sts	0x2040, r21	; 0x802040 <transfer+0x7>
     b06:	d9 01       	movw	r26, r18
     b08:	a8 0f       	add	r26, r24
     b0a:	b9 1f       	adc	r27, r25
     b0c:	8c 91       	ld	r24, X
     b0e:	87 83       	std	Z+7, r24	; 0x07
     b10:	3a c0       	rjmp	.+116    	; 0xb86 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     b16:	10 92 43 20 	sts	0x2043, r1	; 0x802043 <transfer+0xa>
     b1a:	35 c0       	rjmp	.+106    	; 0xb86 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     b1c:	88 23       	and	r24, r24
     b1e:	84 f5       	brge	.+96     	; 0xb80 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     b20:	a9 e3       	ldi	r26, 0x39	; 57
     b22:	b0 e2       	ldi	r27, 0x20	; 32
     b24:	12 96       	adiw	r26, 0x02	; 2
     b26:	cd 91       	ld	r28, X+
     b28:	dc 91       	ld	r29, X
     b2a:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     b2c:	16 96       	adiw	r26, 0x06	; 6
     b2e:	8d 91       	ld	r24, X+
     b30:	9c 91       	ld	r25, X
     b32:	17 97       	sbiw	r26, 0x07	; 7
     b34:	28 85       	ldd	r18, Y+8	; 0x08
     b36:	39 85       	ldd	r19, Y+9	; 0x09
     b38:	82 17       	cp	r24, r18
     b3a:	93 07       	cpc	r25, r19
     b3c:	d8 f4       	brcc	.+54     	; 0xb74 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     b3e:	6e 81       	ldd	r22, Y+6	; 0x06
     b40:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     b42:	9c 01       	movw	r18, r24
     b44:	2f 5f       	subi	r18, 0xFF	; 255
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	20 93 3f 20 	sts	0x203F, r18	; 0x80203f <transfer+0x6>
     b4c:	30 93 40 20 	sts	0x2040, r19	; 0x802040 <transfer+0x7>
     b50:	47 81       	ldd	r20, Z+7	; 0x07
     b52:	db 01       	movw	r26, r22
     b54:	a8 0f       	add	r26, r24
     b56:	b9 1f       	adc	r27, r25
     b58:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     b5a:	88 85       	ldd	r24, Y+8	; 0x08
     b5c:	99 85       	ldd	r25, Y+9	; 0x09
     b5e:	28 17       	cp	r18, r24
     b60:	39 07       	cpc	r19, r25
     b62:	18 f4       	brcc	.+6      	; 0xb6a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	83 83       	std	Z+3, r24	; 0x03
     b68:	0e c0       	rjmp	.+28     	; 0xb86 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     b6a:	87 e0       	ldi	r24, 0x07	; 7
     b6c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     b6e:	10 92 43 20 	sts	0x2043, r1	; 0x802043 <transfer+0xa>
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     b78:	89 ef       	ldi	r24, 0xF9	; 249
     b7a:	80 93 43 20 	sts	0x2043, r24	; 0x802043 <transfer+0xa>
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     b80:	8b ef       	ldi	r24, 0xFB	; 251
     b82:	80 93 43 20 	sts	0x2043, r24	; 0x802043 <transfer+0xa>
	}
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	08 b6       	in	r0, 0x38	; 56
     b98:	0f 92       	push	r0
     b9a:	18 be       	out	0x38, r1	; 56
     b9c:	09 b6       	in	r0, 0x39	; 57
     b9e:	0f 92       	push	r0
     ba0:	19 be       	out	0x39, r1	; 57
     ba2:	0b b6       	in	r0, 0x3b	; 59
     ba4:	0f 92       	push	r0
     ba6:	1b be       	out	0x3b, r1	; 59
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
     bc0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <twim_interrupt_handler>
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	bf 91       	pop	r27
     bca:	af 91       	pop	r26
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	7f 91       	pop	r23
     bd2:	6f 91       	pop	r22
     bd4:	5f 91       	pop	r21
     bd6:	4f 91       	pop	r20
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0b be       	out	0x3b, r0	; 59
     be0:	0f 90       	pop	r0
     be2:	09 be       	out	0x39, r0	; 57
     be4:	0f 90       	pop	r0
     be6:	08 be       	out	0x38, r0	; 56
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	11 24       	eor	r1, r1
     bfc:	08 b6       	in	r0, 0x38	; 56
     bfe:	0f 92       	push	r0
     c00:	18 be       	out	0x38, r1	; 56
     c02:	09 b6       	in	r0, 0x39	; 57
     c04:	0f 92       	push	r0
     c06:	19 be       	out	0x39, r1	; 57
     c08:	0b b6       	in	r0, 0x3b	; 59
     c0a:	0f 92       	push	r0
     c0c:	1b be       	out	0x3b, r1	; 59
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	0e 94 2f 05 	call	0xa5e	; 0xa5e <twim_interrupt_handler>
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0b be       	out	0x3b, r0	; 59
     c46:	0f 90       	pop	r0
     c48:	09 be       	out	0x39, r0	; 57
     c4a:	0f 90       	pop	r0
     c4c:	08 be       	out	0x38, r0	; 56
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti

00000c58 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     c58:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     c5a:	db 01       	movw	r26, r22
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	8c 91       	ld	r24, X
     c60:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     c62:	88 eb       	ldi	r24, 0xB8	; 184
     c64:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     c6a:	e9 e3       	ldi	r30, 0x39	; 57
     c6c:	f0 e2       	ldi	r31, 0x20	; 32
     c6e:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     c70:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     c72:	e0 ea       	ldi	r30, 0xA0	; 160
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	82 60       	ori	r24, 0x02	; 2
     c7a:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     c7c:	78 94       	sei

	return STATUS_OK;
}
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	08 95       	ret

00000c82 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	1f 92       	push	r1
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9c 01       	movw	r18, r24
     c8e:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     c90:	89 2b       	or	r24, r25
     c92:	09 f4       	brne	.+2      	; 0xc96 <twi_master_transfer+0x14>
     c94:	5a c0       	rjmp	.+180    	; 0xd4a <twi_master_transfer+0xc8>
     c96:	30 97       	sbiw	r30, 0x00	; 0
     c98:	09 f4       	brne	.+2      	; 0xc9c <twi_master_transfer+0x1a>
     c9a:	59 c0       	rjmp	.+178    	; 0xd4e <twi_master_transfer+0xcc>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     c9c:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     c9e:	80 91 42 20 	lds	r24, 0x2042	; 0x802042 <transfer+0x9>
     ca2:	88 23       	and	r24, r24
     ca4:	19 f0       	breq	.+6      	; 0xcac <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     ca6:	99 23       	and	r25, r25
     ca8:	f1 f3       	breq	.-4      	; 0xca6 <twi_master_transfer+0x24>
     caa:	53 c0       	rjmp	.+166    	; 0xd52 <twi_master_transfer+0xd0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cac:	8f b7       	in	r24, 0x3f	; 63
     cae:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cb0:	f8 94       	cli
	return flags;
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     cb4:	a9 e3       	ldi	r26, 0x39	; 57
     cb6:	b0 e2       	ldi	r27, 0x20	; 32
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	19 96       	adiw	r26, 0x09	; 9
     cbc:	9c 93       	st	X, r25
     cbe:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
     cc0:	90 e8       	ldi	r25, 0x80	; 128
     cc2:	1a 96       	adiw	r26, 0x0a	; 10
     cc4:	9c 93       	st	X, r25
     cc6:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cc8:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     cca:	2d 93       	st	X+, r18
     ccc:	3c 93       	st	X, r19
     cce:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
     cd0:	12 96       	adiw	r26, 0x02	; 2
     cd2:	6d 93       	st	X+, r22
     cd4:	7c 93       	st	X, r23
     cd6:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	1d 92       	st	X+, r1
     cdc:	1c 92       	st	X, r1
     cde:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
     ce0:	16 96       	adiw	r26, 0x06	; 6
     ce2:	1d 92       	st	X+, r1
     ce4:	1c 92       	st	X, r1
     ce6:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
     ce8:	18 96       	adiw	r26, 0x08	; 8
     cea:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
     cec:	80 81       	ld	r24, Z
     cee:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     cf0:	64 81       	ldd	r22, Z+4	; 0x04
     cf2:	75 81       	ldd	r23, Z+5	; 0x05
     cf4:	67 2b       	or	r22, r23
     cf6:	11 f4       	brne	.+4      	; 0xcfc <twi_master_transfer+0x7a>
     cf8:	41 11       	cpse	r20, r1
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
     cfc:	f9 01       	movw	r30, r18
     cfe:	86 83       	std	Z+6, r24	; 0x06
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	f9 01       	movw	r30, r18
     d06:	86 83       	std	Z+6, r24	; 0x06

	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     d08:	e9 e3       	ldi	r30, 0x39	; 57
     d0a:	f0 e2       	ldi	r31, 0x20	; 32
     d0c:	92 85       	ldd	r25, Z+10	; 0x0a
     d0e:	90 38       	cpi	r25, 0x80	; 128
     d10:	e9 f3       	breq	.-6      	; 0xd0c <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     d12:	f9 01       	movw	r30, r18
     d14:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while ((! twim_idle(transfer.bus)) && --timeout) { barrier(); }
     d16:	83 70       	andi	r24, 0x03	; 3
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	09 f1       	breq	.+66     	; 0xd5e <twi_master_transfer+0xdc>
     d1c:	23 e6       	ldi	r18, 0x63	; 99
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	a9 e3       	ldi	r26, 0x39	; 57
     d22:	b0 e2       	ldi	r27, 0x20	; 32
     d24:	ed 91       	ld	r30, X+
     d26:	fc 91       	ld	r31, X
     d28:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     d2a:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while ((! twim_idle(transfer.bus)) && --timeout) { barrier(); }
     d2c:	83 70       	andi	r24, 0x03	; 3
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	21 f0       	breq	.+8      	; 0xd3a <twi_master_transfer+0xb8>
     d32:	21 50       	subi	r18, 0x01	; 1
     d34:	31 09       	sbc	r19, r1
     d36:	b1 f7       	brne	.-20     	; 0xd24 <twi_master_transfer+0xa2>
     d38:	0e c0       	rjmp	.+28     	; 0xd56 <twi_master_transfer+0xd4>

	status_code_t status = transfer.status;
     d3a:	80 91 43 20 	lds	r24, 0x2043	; 0x802043 <transfer+0xa>

	if(!timeout)
     d3e:	23 2b       	or	r18, r19
     d40:	09 f4       	brne	.+2      	; 0xd44 <twi_master_transfer+0xc2>
		status = ERR_TIMEOUT;
     d42:	8d ef       	ldi	r24, 0xFD	; 253

	transfer.locked = false;
     d44:	10 92 42 20 	sts	0x2042, r1	; 0x802042 <transfer+0x9>
     d48:	0d c0       	rjmp	.+26     	; 0xd64 <twi_master_transfer+0xe2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     d4a:	88 ef       	ldi	r24, 0xF8	; 248
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <twi_master_transfer+0xe2>
     d4e:	88 ef       	ldi	r24, 0xF8	; 248
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <twi_master_transfer+0xe2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     d52:	86 ef       	ldi	r24, 0xF6	; 246
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <twi_master_transfer+0xe2>
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while ((! twim_idle(transfer.bus)) && --timeout) { barrier(); }

	status_code_t status = transfer.status;
     d56:	80 91 43 20 	lds	r24, 0x2043	; 0x802043 <transfer+0xa>

	if(!timeout)
		status = ERR_TIMEOUT;
     d5a:	8d ef       	ldi	r24, 0xFD	; 253
     d5c:	f3 cf       	rjmp	.-26     	; 0xd44 <twi_master_transfer+0xc2>
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while ((! twim_idle(transfer.bus)) && --timeout) { barrier(); }

	status_code_t status = transfer.status;
     d5e:	80 91 43 20 	lds	r24, 0x2043	; 0x802043 <transfer+0xa>
     d62:	f0 cf       	rjmp	.-32     	; 0xd44 <twi_master_transfer+0xc2>

		status = twim_release();
	}

	return status;
}
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <_Z17ReadSignatureBytei>:



int8_t ReadSignatureByte(int16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     d6c:	aa ec       	ldi	r26, 0xCA	; 202
     d6e:	b1 e0       	ldi	r27, 0x01	; 1
     d70:	22 e0       	ldi	r18, 0x02	; 2
     d72:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     d74:	fc 01       	movw	r30, r24
     d76:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     d78:	1c 92       	st	X, r1
	return Result;
}
     d7a:	08 95       	ret

00000d7c <_Z7ReadADCaa>:

int16_t ReadADC(int8_t Channel, int8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	c8 2f       	mov	r28, r24
     d86:	d6 2f       	mov	r29, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     d88:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     d8c:	80 fd       	sbrc	r24, 0
     d8e:	16 c0       	rjmp	.+44     	; 0xdbc <_Z7ReadADCaa+0x40>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     d90:	00 e0       	ldi	r16, 0x00	; 0
     d92:	12 e0       	ldi	r17, 0x02	; 2
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	f8 01       	movw	r30, r16
     d98:	80 83       	st	Z, r24
		ADCA.CTRLB = (0<<4); // unSigned Mode
     d9a:	11 82       	std	Z+1, r1	; 0x01
		ADCA.REFCTRL = 0; // Internal 1v ref
     d9c:	12 82       	std	Z+2, r1	; 0x02
		ADCA.EVCTRL = 0 ; // no events
     d9e:	13 82       	std	Z+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV128_gc ;
     da0:	85 e0       	ldi	r24, 0x05	; 5
     da2:	84 83       	std	Z+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x0C) ; //ADC Calibration Byte 0
     da4:	8c e0       	ldi	r24, 0x0C	; 12
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17ReadSignatureBytei>
     dac:	f8 01       	movw	r30, r16
     dae:	84 87       	std	Z+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x0D) ; //ADC Calibration Byte 1
     db0:	8d e0       	ldi	r24, 0x0D	; 13
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17ReadSignatureBytei>
     db8:	f8 01       	movw	r30, r16
     dba:	85 87       	std	Z+13, r24	; 0x0d
		//ADCA.SAMPCTRL = This register does not exist
		//_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     dbc:	e0 e0       	ldi	r30, 0x00	; 0
     dbe:	f2 e0       	ldi	r31, 0x02	; 2
     dc0:	d0 af       	std	Z+56, r29	; 0x38
	ADCA.CH3.MUXCTRL = (Channel<<3);
     dc2:	cc 0f       	add	r28, r28
     dc4:	cc 0f       	add	r28, r28
     dc6:	cc 0f       	add	r28, r28
     dc8:	c1 af       	std	Z+57, r28	; 0x39
	ADCA.CH3.INTCTRL = 0 ; // No interrupt
     dca:	12 ae       	std	Z+58, r1	; 0x3a
	//ADCA.CH0.SCAN Another bogus register
	for(int8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH3.CTRL |= ADC_CH_START_bm; // Start conversion
     dcc:	80 ad       	ldd	r24, Z+56	; 0x38
     dce:	80 68       	ori	r24, 0x80	; 128
     dd0:	80 af       	std	Z+56, r24	; 0x38
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     dd2:	86 81       	ldd	r24, Z+6	; 0x06
     dd4:	88 23       	and	r24, r24
     dd6:	e9 f3       	breq	.-6      	; 0xdd2 <_Z7ReadADCaa+0x56>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     dd8:	e0 e0       	ldi	r30, 0x00	; 0
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	86 81       	ldd	r24, Z+6	; 0x06
     dde:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH3.MUXCTRL = (Channel<<3);
	ADCA.CH3.INTCTRL = 0 ; // No interrupt
	//ADCA.CH0.SCAN Another bogus register
	for(int8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH3.CTRL |= ADC_CH_START_bm; // Start conversion
     de0:	80 ad       	ldd	r24, Z+56	; 0x38
     de2:	80 68       	ori	r24, 0x80	; 128
     de4:	80 af       	std	Z+56, r24	; 0x38
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     de6:	86 81       	ldd	r24, Z+6	; 0x06
     de8:	88 23       	and	r24, r24
     dea:	e9 f3       	breq	.-6      	; 0xde6 <_Z7ReadADCaa+0x6a>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     dec:	e0 e0       	ldi	r30, 0x00	; 0
     dee:	f2 e0       	ldi	r31, 0x02	; 2
     df0:	86 81       	ldd	r24, Z+6	; 0x06
     df2:	86 83       	std	Z+6, r24	; 0x06
	}
	return ADCA.CH3RES ;
     df4:	86 89       	ldd	r24, Z+22	; 0x16
     df6:	97 89       	ldd	r25, Z+23	; 0x17
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <_Z8readTempv>:
	uint16_t VREF =  1000; // Internal reference voltage of 1 V or 1000mV
	uint16_t DELTAV = 27; // Voltage offset in mV
	uint16_t BITCOUNT = 4096;
	uint16_t FARCONS = 320; // Y intercept for Celsius-->Farenheit conversion

	uint32_t Reading = ReadADC(3, 1); //Reading from the ADC, BITS
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	0e 94 be 06 	call	0xd7c	; 0xd7c <_Z7ReadADCaa>
	uint32_t ReadingmV = Reading * VREF;
	uint16_t Voltage = (ReadingmV/BITCOUNT) - DELTAV; //Voltage at pin in mV
	uint16_t Temp_dC = (Voltage - 500); //Temperature in deg deci Celsius
	uint16_t Temp_dF = (Temp_dC * 1.8 + FARCONS); //Temperature in deg deci Farenheit

	return Temp_dF;
     e0a:	28 ee       	ldi	r18, 0xE8	; 232
     e0c:	33 e0       	ldi	r19, 0x03	; 3
     e0e:	dc 01       	movw	r26, r24
     e10:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__usmulhisi3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	07 2e       	mov	r0, r23
     e1a:	7c e0       	ldi	r23, 0x0C	; 12
     e1c:	b6 95       	lsr	r27
     e1e:	a7 95       	ror	r26
     e20:	97 95       	ror	r25
     e22:	87 95       	ror	r24
     e24:	7a 95       	dec	r23
     e26:	d1 f7       	brne	.-12     	; 0xe1c <_Z8readTempv+0x1a>
     e28:	70 2d       	mov	r23, r0
     e2a:	bc 01       	movw	r22, r24
     e2c:	6f 50       	subi	r22, 0x0F	; 15
     e2e:	72 40       	sbci	r23, 0x02	; 2
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatunsisf>
     e38:	26 e6       	ldi	r18, 0x66	; 102
     e3a:	36 e6       	ldi	r19, 0x66	; 102
     e3c:	46 ee       	ldi	r20, 0xE6	; 230
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__mulsf3>
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 ea       	ldi	r20, 0xA0	; 160
     e4a:	53 e4       	ldi	r21, 0x43	; 67
     e4c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
     e50:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__fixunssfsi>
}
     e54:	cb 01       	movw	r24, r22
     e56:	08 95       	ret

00000e58 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	1f 92       	push	r1
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e62:	9f b7       	in	r25, 0x3f	; 63
     e64:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e66:	f8 94       	cli
	return flags;
     e68:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e6a:	e8 2f       	mov	r30, r24
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	e0 59       	subi	r30, 0x90	; 144
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	60 95       	com	r22
     e74:	80 81       	ld	r24, Z
     e76:	68 23       	and	r22, r24
     e78:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e7a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	1f 92       	push	r1
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e8e:	9f b7       	in	r25, 0x3f	; 63
     e90:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e92:	f8 94       	cli
	return flags;
     e94:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     e96:	e8 2f       	mov	r30, r24
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	e0 59       	subi	r30, 0x90	; 144
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 81       	ld	r24, Z
     ea0:	68 2b       	or	r22, r24
     ea2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ea4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     ee2:	e0 91 76 20 	lds	r30, 0x2076	; 0x802076 <tc_tcc0_ovf_callback>
     ee6:	f0 91 77 20 	lds	r31, 0x2077	; 0x802077 <tc_tcc0_ovf_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     eee:	19 95       	eicall
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     f52:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <tc_tcc0_err_callback>
     f56:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <tc_tcc0_err_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_15+0x42>
		tc_tcc0_err_callback();
     f5e:	19 95       	eicall
	}
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     fc2:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <tc_tcc0_cca_callback>
     fc6:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <tc_tcc0_cca_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     fce:	19 95       	eicall
	}
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    1032:	e0 91 70 20 	lds	r30, 0x2070	; 0x802070 <tc_tcc0_ccb_callback>
    1036:	f0 91 71 20 	lds	r31, 0x2071	; 0x802071 <tc_tcc0_ccb_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
    103e:	19 95       	eicall
	}
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    10a2:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <tc_tcc0_ccc_callback>
    10a6:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <tc_tcc0_ccc_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
    10ae:	19 95       	eicall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1112:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcc0_ccd_callback>
    1116:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcc0_ccd_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1182:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcc1_ovf_callback>
    1186:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcc1_ovf_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    11f2:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcc1_err_callback>
    11f6:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcc1_err_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_21+0x42>
		tc_tcc1_err_callback();
    11fe:	19 95       	eicall
	}
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1262:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcc1_cca_callback>
    1266:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcc1_cca_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_22+0x42>
		tc_tcc1_cca_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    12d2:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcc1_ccb_callback>
    12d6:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcc1_ccb_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    12de:	19 95       	eicall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	08 b6       	in	r0, 0x38	; 56
    131a:	0f 92       	push	r0
    131c:	18 be       	out	0x38, r1	; 56
    131e:	09 b6       	in	r0, 0x39	; 57
    1320:	0f 92       	push	r0
    1322:	19 be       	out	0x39, r1	; 57
    1324:	0b b6       	in	r0, 0x3b	; 59
    1326:	0f 92       	push	r0
    1328:	1b be       	out	0x3b, r1	; 59
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1342:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcd0_ovf_callback>
    1346:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcd0_ovf_callback+0x1>
    134a:	30 97       	sbiw	r30, 0x00	; 0
    134c:	09 f0       	breq	.+2      	; 0x1350 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    134e:	19 95       	eicall
	}
}
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0b be       	out	0x3b, r0	; 59
    136c:	0f 90       	pop	r0
    136e:	09 be       	out	0x39, r0	; 57
    1370:	0f 90       	pop	r0
    1372:	08 be       	out	0x38, r0	; 56
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	08 b6       	in	r0, 0x38	; 56
    138a:	0f 92       	push	r0
    138c:	18 be       	out	0x38, r1	; 56
    138e:	09 b6       	in	r0, 0x39	; 57
    1390:	0f 92       	push	r0
    1392:	19 be       	out	0x39, r1	; 57
    1394:	0b b6       	in	r0, 0x3b	; 59
    1396:	0f 92       	push	r0
    1398:	1b be       	out	0x3b, r1	; 59
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    13b2:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcd0_err_callback>
    13b6:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcd0_err_callback+0x1>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <__vector_78+0x42>
		tc_tcd0_err_callback();
    13be:	19 95       	eicall
	}
}
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0b be       	out	0x3b, r0	; 59
    13dc:	0f 90       	pop	r0
    13de:	09 be       	out	0x39, r0	; 57
    13e0:	0f 90       	pop	r0
    13e2:	08 be       	out	0x38, r0	; 56
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	08 b6       	in	r0, 0x38	; 56
    13fa:	0f 92       	push	r0
    13fc:	18 be       	out	0x38, r1	; 56
    13fe:	09 b6       	in	r0, 0x39	; 57
    1400:	0f 92       	push	r0
    1402:	19 be       	out	0x39, r1	; 57
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	1b be       	out	0x3b, r1	; 59
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1422:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcd0_cca_callback>
    1426:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcd0_cca_callback+0x1>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	09 f0       	breq	.+2      	; 0x1430 <__vector_79+0x42>
		tc_tcd0_cca_callback();
    142e:	19 95       	eicall
	}
}
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0b be       	out	0x3b, r0	; 59
    144c:	0f 90       	pop	r0
    144e:	09 be       	out	0x39, r0	; 57
    1450:	0f 90       	pop	r0
    1452:	08 be       	out	0x38, r0	; 56
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	08 b6       	in	r0, 0x38	; 56
    146a:	0f 92       	push	r0
    146c:	18 be       	out	0x38, r1	; 56
    146e:	09 b6       	in	r0, 0x39	; 57
    1470:	0f 92       	push	r0
    1472:	19 be       	out	0x39, r1	; 57
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	1b be       	out	0x3b, r1	; 59
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1492:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tcd0_ccb_callback>
    1496:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tcd0_ccb_callback+0x1>
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    149e:	19 95       	eicall
	}
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0b be       	out	0x3b, r0	; 59
    14bc:	0f 90       	pop	r0
    14be:	09 be       	out	0x39, r0	; 57
    14c0:	0f 90       	pop	r0
    14c2:	08 be       	out	0x38, r0	; 56
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	08 b6       	in	r0, 0x38	; 56
    14da:	0f 92       	push	r0
    14dc:	18 be       	out	0x38, r1	; 56
    14de:	09 b6       	in	r0, 0x39	; 57
    14e0:	0f 92       	push	r0
    14e2:	19 be       	out	0x39, r1	; 57
    14e4:	0b b6       	in	r0, 0x3b	; 59
    14e6:	0f 92       	push	r0
    14e8:	1b be       	out	0x3b, r1	; 59
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1502:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tcd0_ccc_callback>
    1506:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tcd0_ccc_callback+0x1>
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	09 f0       	breq	.+2      	; 0x1510 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    150e:	19 95       	eicall
	}
}
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0b be       	out	0x3b, r0	; 59
    152c:	0f 90       	pop	r0
    152e:	09 be       	out	0x39, r0	; 57
    1530:	0f 90       	pop	r0
    1532:	08 be       	out	0x38, r0	; 56
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	08 b6       	in	r0, 0x38	; 56
    154a:	0f 92       	push	r0
    154c:	18 be       	out	0x38, r1	; 56
    154e:	09 b6       	in	r0, 0x39	; 57
    1550:	0f 92       	push	r0
    1552:	19 be       	out	0x39, r1	; 57
    1554:	0b b6       	in	r0, 0x3b	; 59
    1556:	0f 92       	push	r0
    1558:	1b be       	out	0x3b, r1	; 59
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1572:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tcd0_ccd_callback>
    1576:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tcd0_ccd_callback+0x1>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    157e:	19 95       	eicall
	}
}
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	09 be       	out	0x39, r0	; 57
    15a0:	0f 90       	pop	r0
    15a2:	08 be       	out	0x38, r0	; 56
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	08 b6       	in	r0, 0x38	; 56
    15ba:	0f 92       	push	r0
    15bc:	18 be       	out	0x38, r1	; 56
    15be:	09 b6       	in	r0, 0x39	; 57
    15c0:	0f 92       	push	r0
    15c2:	19 be       	out	0x39, r1	; 57
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	1b be       	out	0x3b, r1	; 59
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    15e2:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tcd1_ovf_callback>
    15e6:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tcd1_ovf_callback+0x1>
    15ea:	30 97       	sbiw	r30, 0x00	; 0
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    15ee:	19 95       	eicall
	}
}
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0b be       	out	0x3b, r0	; 59
    160c:	0f 90       	pop	r0
    160e:	09 be       	out	0x39, r0	; 57
    1610:	0f 90       	pop	r0
    1612:	08 be       	out	0x38, r0	; 56
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	08 b6       	in	r0, 0x38	; 56
    162a:	0f 92       	push	r0
    162c:	18 be       	out	0x38, r1	; 56
    162e:	09 b6       	in	r0, 0x39	; 57
    1630:	0f 92       	push	r0
    1632:	19 be       	out	0x39, r1	; 57
    1634:	0b b6       	in	r0, 0x3b	; 59
    1636:	0f 92       	push	r0
    1638:	1b be       	out	0x3b, r1	; 59
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1652:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tcd1_err_callback>
    1656:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tcd1_err_callback+0x1>
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <__vector_84+0x42>
		tc_tcd1_err_callback();
    165e:	19 95       	eicall
	}
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	09 be       	out	0x39, r0	; 57
    1680:	0f 90       	pop	r0
    1682:	08 be       	out	0x38, r0	; 56
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	08 b6       	in	r0, 0x38	; 56
    169a:	0f 92       	push	r0
    169c:	18 be       	out	0x38, r1	; 56
    169e:	09 b6       	in	r0, 0x39	; 57
    16a0:	0f 92       	push	r0
    16a2:	19 be       	out	0x39, r1	; 57
    16a4:	0b b6       	in	r0, 0x3b	; 59
    16a6:	0f 92       	push	r0
    16a8:	1b be       	out	0x3b, r1	; 59
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    16c2:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tcd1_cca_callback>
    16c6:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tcd1_cca_callback+0x1>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    16ce:	19 95       	eicall
	}
}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0b be       	out	0x3b, r0	; 59
    16ec:	0f 90       	pop	r0
    16ee:	09 be       	out	0x39, r0	; 57
    16f0:	0f 90       	pop	r0
    16f2:	08 be       	out	0x38, r0	; 56
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	08 b6       	in	r0, 0x38	; 56
    170a:	0f 92       	push	r0
    170c:	18 be       	out	0x38, r1	; 56
    170e:	09 b6       	in	r0, 0x39	; 57
    1710:	0f 92       	push	r0
    1712:	19 be       	out	0x39, r1	; 57
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	1b be       	out	0x3b, r1	; 59
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1732:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcd1_ccb_callback>
    1736:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcd1_ccb_callback+0x1>
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f0       	breq	.+2      	; 0x1740 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    173e:	19 95       	eicall
	}
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	09 be       	out	0x39, r0	; 57
    1760:	0f 90       	pop	r0
    1762:	08 be       	out	0x38, r0	; 56
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	08 b6       	in	r0, 0x38	; 56
    177a:	0f 92       	push	r0
    177c:	18 be       	out	0x38, r1	; 56
    177e:	09 b6       	in	r0, 0x39	; 57
    1780:	0f 92       	push	r0
    1782:	19 be       	out	0x39, r1	; 57
    1784:	0b b6       	in	r0, 0x3b	; 59
    1786:	0f 92       	push	r0
    1788:	1b be       	out	0x3b, r1	; 59
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    17a2:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tce0_ovf_callback>
    17a6:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tce0_ovf_callback+0x1>
    17aa:	30 97       	sbiw	r30, 0x00	; 0
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    17ae:	19 95       	eicall
	}
}
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	09 be       	out	0x39, r0	; 57
    17d0:	0f 90       	pop	r0
    17d2:	08 be       	out	0x38, r0	; 56
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	08 b6       	in	r0, 0x38	; 56
    17ea:	0f 92       	push	r0
    17ec:	18 be       	out	0x38, r1	; 56
    17ee:	09 b6       	in	r0, 0x39	; 57
    17f0:	0f 92       	push	r0
    17f2:	19 be       	out	0x39, r1	; 57
    17f4:	0b b6       	in	r0, 0x3b	; 59
    17f6:	0f 92       	push	r0
    17f8:	1b be       	out	0x3b, r1	; 59
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1812:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tce0_err_callback>
    1816:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tce0_err_callback+0x1>
    181a:	30 97       	sbiw	r30, 0x00	; 0
    181c:	09 f0       	breq	.+2      	; 0x1820 <__vector_48+0x42>
		tc_tce0_err_callback();
    181e:	19 95       	eicall
	}
}
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0b be       	out	0x3b, r0	; 59
    183c:	0f 90       	pop	r0
    183e:	09 be       	out	0x39, r0	; 57
    1840:	0f 90       	pop	r0
    1842:	08 be       	out	0x38, r0	; 56
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	08 b6       	in	r0, 0x38	; 56
    185a:	0f 92       	push	r0
    185c:	18 be       	out	0x38, r1	; 56
    185e:	09 b6       	in	r0, 0x39	; 57
    1860:	0f 92       	push	r0
    1862:	19 be       	out	0x39, r1	; 57
    1864:	0b b6       	in	r0, 0x3b	; 59
    1866:	0f 92       	push	r0
    1868:	1b be       	out	0x3b, r1	; 59
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1882:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tce0_cca_callback>
    1886:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tce0_cca_callback+0x1>
    188a:	30 97       	sbiw	r30, 0x00	; 0
    188c:	09 f0       	breq	.+2      	; 0x1890 <__vector_49+0x42>
		tc_tce0_cca_callback();
    188e:	19 95       	eicall
	}
}
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0b be       	out	0x3b, r0	; 59
    18ac:	0f 90       	pop	r0
    18ae:	09 be       	out	0x39, r0	; 57
    18b0:	0f 90       	pop	r0
    18b2:	08 be       	out	0x38, r0	; 56
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	08 b6       	in	r0, 0x38	; 56
    18ca:	0f 92       	push	r0
    18cc:	18 be       	out	0x38, r1	; 56
    18ce:	09 b6       	in	r0, 0x39	; 57
    18d0:	0f 92       	push	r0
    18d2:	19 be       	out	0x39, r1	; 57
    18d4:	0b b6       	in	r0, 0x3b	; 59
    18d6:	0f 92       	push	r0
    18d8:	1b be       	out	0x3b, r1	; 59
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	6f 93       	push	r22
    18e4:	7f 93       	push	r23
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    18f2:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tce0_ccb_callback>
    18f6:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tce0_ccb_callback+0x1>
    18fa:	30 97       	sbiw	r30, 0x00	; 0
    18fc:	09 f0       	breq	.+2      	; 0x1900 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    18fe:	19 95       	eicall
	}
}
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0b be       	out	0x3b, r0	; 59
    191c:	0f 90       	pop	r0
    191e:	09 be       	out	0x39, r0	; 57
    1920:	0f 90       	pop	r0
    1922:	08 be       	out	0x38, r0	; 56
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	08 b6       	in	r0, 0x38	; 56
    193a:	0f 92       	push	r0
    193c:	18 be       	out	0x38, r1	; 56
    193e:	09 b6       	in	r0, 0x39	; 57
    1940:	0f 92       	push	r0
    1942:	19 be       	out	0x39, r1	; 57
    1944:	0b b6       	in	r0, 0x3b	; 59
    1946:	0f 92       	push	r0
    1948:	1b be       	out	0x3b, r1	; 59
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1962:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tce0_ccc_callback>
    1966:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tce0_ccc_callback+0x1>
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	09 f0       	breq	.+2      	; 0x1970 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    196e:	19 95       	eicall
	}
}
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0b be       	out	0x3b, r0	; 59
    198c:	0f 90       	pop	r0
    198e:	09 be       	out	0x39, r0	; 57
    1990:	0f 90       	pop	r0
    1992:	08 be       	out	0x38, r0	; 56
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	08 b6       	in	r0, 0x38	; 56
    19aa:	0f 92       	push	r0
    19ac:	18 be       	out	0x38, r1	; 56
    19ae:	09 b6       	in	r0, 0x39	; 57
    19b0:	0f 92       	push	r0
    19b2:	19 be       	out	0x39, r1	; 57
    19b4:	0b b6       	in	r0, 0x3b	; 59
    19b6:	0f 92       	push	r0
    19b8:	1b be       	out	0x3b, r1	; 59
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    19d2:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tce0_ccd_callback>
    19d6:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tce0_ccd_callback+0x1>
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    19de:	19 95       	eicall
	}
}
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0b be       	out	0x3b, r0	; 59
    19fc:	0f 90       	pop	r0
    19fe:	09 be       	out	0x39, r0	; 57
    1a00:	0f 90       	pop	r0
    1a02:	08 be       	out	0x38, r0	; 56
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	1f 92       	push	r1
    1a16:	1f 92       	push	r1
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a1c:	2f b7       	in	r18, 0x3f	; 63
    1a1e:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1a20:	f8 94       	cli
	return flags;
    1a22:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1a24:	28 2f       	mov	r18, r24
    1a26:	39 2f       	mov	r19, r25
    1a28:	21 15       	cp	r18, r1
    1a2a:	88 e0       	ldi	r24, 0x08	; 8
    1a2c:	38 07       	cpc	r19, r24
    1a2e:	49 f4       	brne	.+18     	; 0x1a42 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a38:	64 e0       	ldi	r22, 0x04	; 4
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
    1a40:	35 c0       	rjmp	.+106    	; 0x1aac <tc_enable+0x9e>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1a42:	20 34       	cpi	r18, 0x40	; 64
    1a44:	88 e0       	ldi	r24, 0x08	; 8
    1a46:	38 07       	cpc	r19, r24
    1a48:	49 f4       	brne	.+18     	; 0x1a5c <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a52:	64 e0       	ldi	r22, 0x04	; 4
    1a54:	83 e0       	ldi	r24, 0x03	; 3
    1a56:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
    1a5a:	28 c0       	rjmp	.+80     	; 0x1aac <tc_enable+0x9e>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1a5c:	21 15       	cp	r18, r1
    1a5e:	89 e0       	ldi	r24, 0x09	; 9
    1a60:	38 07       	cpc	r19, r24
    1a62:	49 f4       	brne	.+18     	; 0x1a76 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	84 e0       	ldi	r24, 0x04	; 4
    1a68:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1a6c:	64 e0       	ldi	r22, 0x04	; 4
    1a6e:	84 e0       	ldi	r24, 0x04	; 4
    1a70:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
    1a74:	1b c0       	rjmp	.+54     	; 0x1aac <tc_enable+0x9e>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1a76:	20 34       	cpi	r18, 0x40	; 64
    1a78:	89 e0       	ldi	r24, 0x09	; 9
    1a7a:	38 07       	cpc	r19, r24
    1a7c:	49 f4       	brne	.+18     	; 0x1a90 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1a86:	64 e0       	ldi	r22, 0x04	; 4
    1a88:	84 e0       	ldi	r24, 0x04	; 4
    1a8a:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <tc_enable+0x9e>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1a90:	21 15       	cp	r18, r1
    1a92:	3a 40       	sbci	r19, 0x0A	; 10
    1a94:	49 f4       	brne	.+18     	; 0x1aa8 <tc_enable+0x9a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1a96:	61 e0       	ldi	r22, 0x01	; 1
    1a98:	85 e0       	ldi	r24, 0x05	; 5
    1a9a:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1a9e:	64 e0       	ldi	r22, 0x04	; 4
    1aa0:	85 e0       	ldi	r24, 0x05	; 5
    1aa2:	0e 94 2c 07 	call	0xe58	; 0xe58 <sysclk_enable_module>
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <tc_enable+0x9e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1aa8:	1f bf       	out	0x3f, r17	; 63
    1aaa:	10 c0       	rjmp	.+32     	; 0x1acc <tc_enable+0xbe>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1aac:	80 91 79 20 	lds	r24, 0x2079	; 0x802079 <sleepmgr_locks+0x1>
    1ab0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <tc_enable+0xa8>
    1ab4:	ff cf       	rjmp	.-2      	; 0x1ab4 <tc_enable+0xa6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ab6:	8f b7       	in	r24, 0x3f	; 63
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1aba:	f8 94       	cli
	return flags;
    1abc:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1abe:	e8 e7       	ldi	r30, 0x78	; 120
    1ac0:	f0 e2       	ldi	r31, 0x20	; 32
    1ac2:	81 81       	ldd	r24, Z+1	; 0x01
    1ac4:	8f 5f       	subi	r24, 0xFF	; 255
    1ac6:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ac8:	9f bf       	out	0x3f, r25	; 63
    1aca:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	08 95       	ret

00001ad8 <tc_disable>:
 *
 * \note
 * mask TC clock (sysclk).
 */
void tc_disable(volatile void *tc)
{
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	1f 92       	push	r1
    1ae0:	1f 92       	push	r1
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ae6:	2f b7       	in	r18, 0x3f	; 63
    1ae8:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1aea:	f8 94       	cli
	return flags;
    1aec:	19 81       	ldd	r17, Y+1	; 0x01
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1aee:	20 91 79 20 	lds	r18, 0x2079	; 0x802079 <sleepmgr_locks+0x1>
    1af2:	21 11       	cpse	r18, r1
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <tc_disable+0x20>
    1af6:	ff cf       	rjmp	.-2      	; 0x1af6 <tc_disable+0x1e>
    1af8:	29 2f       	mov	r18, r25
    1afa:	38 2f       	mov	r19, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1afc:	8f b7       	in	r24, 0x3f	; 63
    1afe:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1b00:	f8 94       	cli
	return flags;
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1b04:	e8 e7       	ldi	r30, 0x78	; 120
    1b06:	f0 e2       	ldi	r31, 0x20	; 32
    1b08:	81 81       	ldd	r24, Z+1	; 0x01
    1b0a:	81 50       	subi	r24, 0x01	; 1
    1b0c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b0e:	9f bf       	out	0x3f, r25	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1b10:	83 2f       	mov	r24, r19
    1b12:	92 2f       	mov	r25, r18
    1b14:	81 15       	cp	r24, r1
    1b16:	28 e0       	ldi	r18, 0x08	; 8
    1b18:	92 07       	cpc	r25, r18
    1b1a:	49 f4       	brne	.+18     	; 0x1b2e <tc_disable+0x56>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b24:	64 e0       	ldi	r22, 0x04	; 4
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
    1b2c:	35 c0       	rjmp	.+106    	; 0x1b98 <tc_disable+0xc0>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1b2e:	80 34       	cpi	r24, 0x40	; 64
    1b30:	28 e0       	ldi	r18, 0x08	; 8
    1b32:	92 07       	cpc	r25, r18
    1b34:	49 f4       	brne	.+18     	; 0x1b48 <tc_disable+0x70>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1b36:	62 e0       	ldi	r22, 0x02	; 2
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b3e:	64 e0       	ldi	r22, 0x04	; 4
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
    1b46:	28 c0       	rjmp	.+80     	; 0x1b98 <tc_disable+0xc0>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1b48:	81 15       	cp	r24, r1
    1b4a:	29 e0       	ldi	r18, 0x09	; 9
    1b4c:	92 07       	cpc	r25, r18
    1b4e:	49 f4       	brne	.+18     	; 0x1b62 <tc_disable+0x8a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b58:	64 e0       	ldi	r22, 0x04	; 4
    1b5a:	84 e0       	ldi	r24, 0x04	; 4
    1b5c:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
    1b60:	1b c0       	rjmp	.+54     	; 0x1b98 <tc_disable+0xc0>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1b62:	80 34       	cpi	r24, 0x40	; 64
    1b64:	29 e0       	ldi	r18, 0x09	; 9
    1b66:	92 07       	cpc	r25, r18
    1b68:	49 f4       	brne	.+18     	; 0x1b7c <tc_disable+0xa4>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	84 e0       	ldi	r24, 0x04	; 4
    1b6e:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b72:	64 e0       	ldi	r22, 0x04	; 4
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
    1b7a:	0e c0       	rjmp	.+28     	; 0x1b98 <tc_disable+0xc0>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1b7c:	81 15       	cp	r24, r1
    1b7e:	9a 40       	sbci	r25, 0x0A	; 10
    1b80:	49 f4       	brne	.+18     	; 0x1b94 <tc_disable+0xbc>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	85 e0       	ldi	r24, 0x05	; 5
    1b86:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b8a:	64 e0       	ldi	r22, 0x04	; 4
    1b8c:	85 e0       	ldi	r24, 0x05	; 5
    1b8e:	0e 94 42 07 	call	0xe84	; 0xe84 <sysclk_disable_module>
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <tc_disable+0xc0>
    1b94:	1f bf       	out	0x3f, r17	; 63
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <tc_disable+0xc2>
    1b98:	1f bf       	out	0x3f, r17	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	08 95       	ret

00001ba6 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1bb4:	6b 01       	movw	r12, r22
    1bb6:	e1 2c       	mov	r14, r1
    1bb8:	f1 2c       	mov	r15, r1
    1bba:	60 e8       	ldi	r22, 0x80	; 128
    1bbc:	74 e8       	ldi	r23, 0x84	; 132
    1bbe:	8e e1       	ldi	r24, 0x1E	; 30
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a7 01       	movw	r20, r14
    1bc4:	96 01       	movw	r18, r12
    1bc6:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    1bca:	ca 01       	movw	r24, r20
    1bcc:	b9 01       	movw	r22, r18
    1bce:	2f ef       	ldi	r18, 0xFF	; 255
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
	if (smallest_div < 1) {
    1bda:	21 15       	cp	r18, r1
    1bdc:	31 05       	cpc	r19, r1
    1bde:	29 f4       	brne	.+10     	; 0x1bea <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    1be4:	21 e0       	ldi	r18, 0x01	; 1
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	2d c0       	rjmp	.+90     	; 0x1c44 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	28 f4       	brcc	.+10     	; 0x1bfa <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    1bf4:	22 e0       	ldi	r18, 0x02	; 2
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	25 c0       	rjmp	.+74     	; 0x1c44 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    1bfa:	24 30       	cpi	r18, 0x04	; 4
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	28 f4       	brcc	.+10     	; 0x1c0a <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    1c00:	83 e0       	ldi	r24, 0x03	; 3
    1c02:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    1c04:	24 e0       	ldi	r18, 0x04	; 4
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	1d c0       	rjmp	.+58     	; 0x1c44 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    1c0a:	28 30       	cpi	r18, 0x08	; 8
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	28 f4       	brcc	.+10     	; 0x1c1a <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    1c10:	84 e0       	ldi	r24, 0x04	; 4
    1c12:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1c14:	28 e0       	ldi	r18, 0x08	; 8
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	15 c0       	rjmp	.+42     	; 0x1c44 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    1c1a:	20 34       	cpi	r18, 0x40	; 64
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	28 f4       	brcc	.+10     	; 0x1c2a <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    1c20:	85 e0       	ldi	r24, 0x05	; 5
    1c22:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    1c24:	20 e4       	ldi	r18, 0x40	; 64
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	0d c0       	rjmp	.+26     	; 0x1c44 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    1c2a:	2f 3f       	cpi	r18, 0xFF	; 255
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <pwm_set_frequency+0x8c>
    1c30:	28 f4       	brcc	.+10     	; 0x1c3c <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    1c32:	86 e0       	ldi	r24, 0x06	; 6
    1c34:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	31 e0       	ldi	r19, 0x01	; 1
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1c3c:	87 e0       	ldi	r24, 0x07	; 7
    1c3e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	60 e8       	ldi	r22, 0x80	; 128
    1c4a:	74 e8       	ldi	r23, 0x84	; 132
    1c4c:	8e e1       	ldi	r24, 0x1E	; 30
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    1c54:	ca 01       	movw	r24, r20
    1c56:	b9 01       	movw	r22, r18
    1c58:	a7 01       	movw	r20, r14
    1c5a:	96 01       	movw	r18, r12
    1c5c:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    1c60:	2d 83       	std	Y+5, r18	; 0x05
    1c62:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1c64:	24 36       	cpi	r18, 0x64	; 100
    1c66:	31 05       	cpc	r19, r1
    1c68:	18 f4       	brcc	.+6      	; 0x1c70 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1c6a:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    1c6c:	1d 82       	std	Y+5, r1	; 0x05
    1c6e:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	08 95       	ret

00001c7e <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	ec 01       	movw	r28, r24
    1c88:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
	switch (tc) {
    1c8a:	62 30       	cpi	r22, 0x02	; 2
    1c8c:	91 f1       	breq	.+100    	; 0x1cf2 <pwm_init+0x74>
    1c8e:	28 f4       	brcc	.+10     	; 0x1c9a <pwm_init+0x1c>
    1c90:	66 23       	and	r22, r22
    1c92:	49 f0       	breq	.+18     	; 0x1ca6 <pwm_init+0x28>
    1c94:	61 30       	cpi	r22, 0x01	; 1
    1c96:	d1 f0       	breq	.+52     	; 0x1ccc <pwm_init+0x4e>
    1c98:	64 c0       	rjmp	.+200    	; 0x1d62 <pwm_init+0xe4>
    1c9a:	63 30       	cpi	r22, 0x03	; 3
    1c9c:	e9 f1       	breq	.+122    	; 0x1d18 <pwm_init+0x9a>
    1c9e:	64 30       	cpi	r22, 0x04	; 4
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <pwm_init+0x26>
    1ca2:	4d c0       	rjmp	.+154    	; 0x1d3e <pwm_init+0xc0>
    1ca4:	5e c0       	rjmp	.+188    	; 0x1d62 <pwm_init+0xe4>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	98 e0       	ldi	r25, 0x08	; 8
    1caa:	88 83       	st	Y, r24
    1cac:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1cae:	e0 e4       	ldi	r30, 0x40	; 64
    1cb0:	f6 e0       	ldi	r31, 0x06	; 6
    1cb2:	30 81       	ld	r19, Z
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	2f ef       	ldi	r18, 0xFF	; 255
    1cba:	24 0f       	add	r18, r20
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <pwm_init+0x44>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	2a 95       	dec	r18
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <pwm_init+0x40>
    1cc6:	83 2b       	or	r24, r19
    1cc8:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1cca:	4b c0       	rjmp	.+150    	; 0x1d62 <pwm_init+0xe4>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
    1cce:	98 e0       	ldi	r25, 0x08	; 8
    1cd0:	88 83       	st	Y, r24
    1cd2:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    1cd4:	e0 e4       	ldi	r30, 0x40	; 64
    1cd6:	f6 e0       	ldi	r31, 0x06	; 6
    1cd8:	30 81       	ld	r19, Z
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	23 e0       	ldi	r18, 0x03	; 3
    1ce0:	24 0f       	add	r18, r20
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <pwm_init+0x6a>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	2a 95       	dec	r18
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <pwm_init+0x66>
    1cec:	83 2b       	or	r24, r19
    1cee:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1cf0:	38 c0       	rjmp	.+112    	; 0x1d62 <pwm_init+0xe4>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	99 e0       	ldi	r25, 0x09	; 9
    1cf6:	88 83       	st	Y, r24
    1cf8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    1cfa:	e0 e6       	ldi	r30, 0x60	; 96
    1cfc:	f6 e0       	ldi	r31, 0x06	; 6
    1cfe:	30 81       	ld	r19, Z
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	2f ef       	ldi	r18, 0xFF	; 255
    1d06:	24 0f       	add	r18, r20
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <pwm_init+0x90>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	2a 95       	dec	r18
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <pwm_init+0x8c>
    1d12:	83 2b       	or	r24, r19
    1d14:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1d16:	25 c0       	rjmp	.+74     	; 0x1d62 <pwm_init+0xe4>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    1d18:	80 e4       	ldi	r24, 0x40	; 64
    1d1a:	99 e0       	ldi	r25, 0x09	; 9
    1d1c:	88 83       	st	Y, r24
    1d1e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1d20:	e0 e6       	ldi	r30, 0x60	; 96
    1d22:	f6 e0       	ldi	r31, 0x06	; 6
    1d24:	30 81       	ld	r19, Z
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	23 e0       	ldi	r18, 0x03	; 3
    1d2c:	24 0f       	add	r18, r20
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <pwm_init+0xb6>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	2a 95       	dec	r18
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <pwm_init+0xb2>
    1d38:	83 2b       	or	r24, r19
    1d3a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1d3c:	12 c0       	rjmp	.+36     	; 0x1d62 <pwm_init+0xe4>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	9a e0       	ldi	r25, 0x0A	; 10
    1d42:	88 83       	st	Y, r24
    1d44:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    1d46:	e0 e8       	ldi	r30, 0x80	; 128
    1d48:	f6 e0       	ldi	r31, 0x06	; 6
    1d4a:	30 81       	ld	r19, Z
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	2f ef       	ldi	r18, 0xFF	; 255
    1d52:	24 0f       	add	r18, r20
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <pwm_init+0xdc>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	2a 95       	dec	r18
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <pwm_init+0xd8>
    1d5e:	83 2b       	or	r24, r19
    1d60:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1d62:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    1d64:	42 30       	cpi	r20, 0x02	; 2
    1d66:	61 f0       	breq	.+24     	; 0x1d80 <pwm_init+0x102>
    1d68:	18 f4       	brcc	.+6      	; 0x1d70 <pwm_init+0xf2>
    1d6a:	41 30       	cpi	r20, 0x01	; 1
    1d6c:	31 f0       	breq	.+12     	; 0x1d7a <pwm_init+0xfc>
    1d6e:	10 c0       	rjmp	.+32     	; 0x1d90 <pwm_init+0x112>
    1d70:	43 30       	cpi	r20, 0x03	; 3
    1d72:	49 f0       	breq	.+18     	; 0x1d86 <pwm_init+0x108>
    1d74:	44 30       	cpi	r20, 0x04	; 4
    1d76:	51 f0       	breq	.+20     	; 0x1d8c <pwm_init+0x10e>
    1d78:	0b c0       	rjmp	.+22     	; 0x1d90 <pwm_init+0x112>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1d7a:	80 e1       	ldi	r24, 0x10	; 16
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1d7e:	08 c0       	rjmp	.+16     	; 0x1d90 <pwm_init+0x112>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1d80:	80 e2       	ldi	r24, 0x20	; 32
    1d82:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1d84:	05 c0       	rjmp	.+10     	; 0x1d90 <pwm_init+0x112>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1d86:	80 e4       	ldi	r24, 0x40	; 64
    1d88:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <pwm_init+0x112>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1d90:	88 81       	ld	r24, Y
    1d92:	99 81       	ldd	r25, Y+1	; 0x01
    1d94:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1d98:	e8 81       	ld	r30, Y
    1d9a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1d9c:	81 81       	ldd	r24, Z+1	; 0x01
    1d9e:	88 7f       	andi	r24, 0xF8	; 248
    1da0:	83 60       	ori	r24, 0x03	; 3
    1da2:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    1da4:	1d 82       	std	Y+5, r1	; 0x05
    1da6:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    1da8:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1daa:	e8 81       	ld	r30, Y
    1dac:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1dae:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1db0:	80 7f       	andi	r24, 0xF0	; 240
    1db2:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    1db4:	b8 01       	movw	r22, r16
    1db6:	ce 01       	movw	r24, r28
    1db8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <pwm_set_frequency>
}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    1dcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dce:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	a6 2f       	mov	r26, r22
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__umulhisi3>
    1ddc:	24 e6       	ldi	r18, 0x64	; 100
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	e8 81       	ld	r30, Y
    1dec:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    1dee:	e6 fd       	sbrc	r30, 6
    1df0:	17 c0       	rjmp	.+46     	; 0x1e20 <pwm_start+0x5a>
		switch (channel_index) {
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	61 f0       	breq	.+24     	; 0x1e0e <pwm_start+0x48>
    1df6:	18 f4       	brcc	.+6      	; 0x1dfe <pwm_start+0x38>
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	31 f0       	breq	.+12     	; 0x1e08 <pwm_start+0x42>
    1dfc:	1b c0       	rjmp	.+54     	; 0x1e34 <pwm_start+0x6e>
    1dfe:	83 30       	cpi	r24, 0x03	; 3
    1e00:	49 f0       	breq	.+18     	; 0x1e14 <pwm_start+0x4e>
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	51 f0       	breq	.+20     	; 0x1e1a <pwm_start+0x54>
    1e06:	16 c0       	rjmp	.+44     	; 0x1e34 <pwm_start+0x6e>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    1e08:	20 af       	std	Z+56, r18	; 0x38
    1e0a:	31 af       	std	Z+57, r19	; 0x39
    1e0c:	13 c0       	rjmp	.+38     	; 0x1e34 <pwm_start+0x6e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    1e0e:	22 af       	std	Z+58, r18	; 0x3a
    1e10:	33 af       	std	Z+59, r19	; 0x3b
    1e12:	10 c0       	rjmp	.+32     	; 0x1e34 <pwm_start+0x6e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    1e14:	24 af       	std	Z+60, r18	; 0x3c
    1e16:	35 af       	std	Z+61, r19	; 0x3d
    1e18:	0d c0       	rjmp	.+26     	; 0x1e34 <pwm_start+0x6e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1e1a:	26 af       	std	Z+62, r18	; 0x3e
    1e1c:	37 af       	std	Z+63, r19	; 0x3f
    1e1e:	0a c0       	rjmp	.+20     	; 0x1e34 <pwm_start+0x6e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <pwm_start+0x64>
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	21 f0       	breq	.+8      	; 0x1e30 <pwm_start+0x6a>
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <pwm_start+0x6e>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1e2a:	20 af       	std	Z+56, r18	; 0x38
    1e2c:	31 af       	std	Z+57, r19	; 0x39
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <pwm_start+0x6e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1e30:	22 af       	std	Z+58, r18	; 0x3a
    1e32:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	e8 81       	ld	r30, Y
    1e3a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1e3c:	86 a3       	std	Z+38, r24	; 0x26
    1e3e:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	e8 81       	ld	r30, Y
    1e44:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    1e46:	e6 fd       	sbrc	r30, 6
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <pwm_start+0x8c>
		((TC0_t *)tc)->CTRLB |= enablemask;
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
    1e4c:	89 2b       	or	r24, r25
    1e4e:	81 83       	std	Z+1, r24	; 0x01
    1e50:	04 c0       	rjmp	.+8      	; 0x1e5a <pwm_start+0x94>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	80 73       	andi	r24, 0x30	; 48
    1e56:	89 2b       	or	r24, r25
    1e58:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1e5a:	e8 81       	ld	r30, Y
    1e5c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1e5e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1e60:	80 7f       	andi	r24, 0xF0	; 240
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	89 2b       	or	r24, r25
    1e66:	80 83       	st	Z, r24
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <__subsf3>:
    1e6e:	50 58       	subi	r21, 0x80	; 128

00001e70 <__addsf3>:
    1e70:	bb 27       	eor	r27, r27
    1e72:	aa 27       	eor	r26, r26
    1e74:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__addsf3x>
    1e78:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_round>
    1e7c:	0e 94 19 10 	call	0x2032	; 0x2032 <__fp_pscA>
    1e80:	38 f0       	brcs	.+14     	; 0x1e90 <__addsf3+0x20>
    1e82:	0e 94 20 10 	call	0x2040	; 0x2040 <__fp_pscB>
    1e86:	20 f0       	brcs	.+8      	; 0x1e90 <__addsf3+0x20>
    1e88:	39 f4       	brne	.+14     	; 0x1e98 <__addsf3+0x28>
    1e8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e8c:	19 f4       	brne	.+6      	; 0x1e94 <__addsf3+0x24>
    1e8e:	26 f4       	brtc	.+8      	; 0x1e98 <__addsf3+0x28>
    1e90:	0c 94 16 10 	jmp	0x202c	; 0x202c <__fp_nan>
    1e94:	0e f4       	brtc	.+2      	; 0x1e98 <__addsf3+0x28>
    1e96:	e0 95       	com	r30
    1e98:	e7 fb       	bst	r30, 7
    1e9a:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__fp_inf>

00001e9e <__addsf3x>:
    1e9e:	e9 2f       	mov	r30, r25
    1ea0:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_split3>
    1ea4:	58 f3       	brcs	.-42     	; 0x1e7c <__addsf3+0xc>
    1ea6:	ba 17       	cp	r27, r26
    1ea8:	62 07       	cpc	r22, r18
    1eaa:	73 07       	cpc	r23, r19
    1eac:	84 07       	cpc	r24, r20
    1eae:	95 07       	cpc	r25, r21
    1eb0:	20 f0       	brcs	.+8      	; 0x1eba <__addsf3x+0x1c>
    1eb2:	79 f4       	brne	.+30     	; 0x1ed2 <__addsf3x+0x34>
    1eb4:	a6 f5       	brtc	.+104    	; 0x1f1e <__addsf3x+0x80>
    1eb6:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__fp_zero>
    1eba:	0e f4       	brtc	.+2      	; 0x1ebe <__addsf3x+0x20>
    1ebc:	e0 95       	com	r30
    1ebe:	0b 2e       	mov	r0, r27
    1ec0:	ba 2f       	mov	r27, r26
    1ec2:	a0 2d       	mov	r26, r0
    1ec4:	0b 01       	movw	r0, r22
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	90 01       	movw	r18, r0
    1eca:	0c 01       	movw	r0, r24
    1ecc:	ca 01       	movw	r24, r20
    1ece:	a0 01       	movw	r20, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	ff 27       	eor	r31, r31
    1ed4:	59 1b       	sub	r21, r25
    1ed6:	99 f0       	breq	.+38     	; 0x1efe <__addsf3x+0x60>
    1ed8:	59 3f       	cpi	r21, 0xF9	; 249
    1eda:	50 f4       	brcc	.+20     	; 0x1ef0 <__addsf3x+0x52>
    1edc:	50 3e       	cpi	r21, 0xE0	; 224
    1ede:	68 f1       	brcs	.+90     	; 0x1f3a <__addsf3x+0x9c>
    1ee0:	1a 16       	cp	r1, r26
    1ee2:	f0 40       	sbci	r31, 0x00	; 0
    1ee4:	a2 2f       	mov	r26, r18
    1ee6:	23 2f       	mov	r18, r19
    1ee8:	34 2f       	mov	r19, r20
    1eea:	44 27       	eor	r20, r20
    1eec:	58 5f       	subi	r21, 0xF8	; 248
    1eee:	f3 cf       	rjmp	.-26     	; 0x1ed6 <__addsf3x+0x38>
    1ef0:	46 95       	lsr	r20
    1ef2:	37 95       	ror	r19
    1ef4:	27 95       	ror	r18
    1ef6:	a7 95       	ror	r26
    1ef8:	f0 40       	sbci	r31, 0x00	; 0
    1efa:	53 95       	inc	r21
    1efc:	c9 f7       	brne	.-14     	; 0x1ef0 <__addsf3x+0x52>
    1efe:	7e f4       	brtc	.+30     	; 0x1f1e <__addsf3x+0x80>
    1f00:	1f 16       	cp	r1, r31
    1f02:	ba 0b       	sbc	r27, r26
    1f04:	62 0b       	sbc	r22, r18
    1f06:	73 0b       	sbc	r23, r19
    1f08:	84 0b       	sbc	r24, r20
    1f0a:	ba f0       	brmi	.+46     	; 0x1f3a <__addsf3x+0x9c>
    1f0c:	91 50       	subi	r25, 0x01	; 1
    1f0e:	a1 f0       	breq	.+40     	; 0x1f38 <__addsf3x+0x9a>
    1f10:	ff 0f       	add	r31, r31
    1f12:	bb 1f       	adc	r27, r27
    1f14:	66 1f       	adc	r22, r22
    1f16:	77 1f       	adc	r23, r23
    1f18:	88 1f       	adc	r24, r24
    1f1a:	c2 f7       	brpl	.-16     	; 0x1f0c <__addsf3x+0x6e>
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <__addsf3x+0x9c>
    1f1e:	ba 0f       	add	r27, r26
    1f20:	62 1f       	adc	r22, r18
    1f22:	73 1f       	adc	r23, r19
    1f24:	84 1f       	adc	r24, r20
    1f26:	48 f4       	brcc	.+18     	; 0x1f3a <__addsf3x+0x9c>
    1f28:	87 95       	ror	r24
    1f2a:	77 95       	ror	r23
    1f2c:	67 95       	ror	r22
    1f2e:	b7 95       	ror	r27
    1f30:	f7 95       	ror	r31
    1f32:	9e 3f       	cpi	r25, 0xFE	; 254
    1f34:	08 f0       	brcs	.+2      	; 0x1f38 <__addsf3x+0x9a>
    1f36:	b0 cf       	rjmp	.-160    	; 0x1e98 <__addsf3+0x28>
    1f38:	93 95       	inc	r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	08 f0       	brcs	.+2      	; 0x1f40 <__addsf3x+0xa2>
    1f3e:	99 27       	eor	r25, r25
    1f40:	ee 0f       	add	r30, r30
    1f42:	97 95       	ror	r25
    1f44:	87 95       	ror	r24
    1f46:	08 95       	ret

00001f48 <__fixunssfsi>:
    1f48:	0e 94 40 10 	call	0x2080	; 0x2080 <__fp_splitA>
    1f4c:	88 f0       	brcs	.+34     	; 0x1f70 <__fixunssfsi+0x28>
    1f4e:	9f 57       	subi	r25, 0x7F	; 127
    1f50:	98 f0       	brcs	.+38     	; 0x1f78 <__fixunssfsi+0x30>
    1f52:	b9 2f       	mov	r27, r25
    1f54:	99 27       	eor	r25, r25
    1f56:	b7 51       	subi	r27, 0x17	; 23
    1f58:	b0 f0       	brcs	.+44     	; 0x1f86 <__fixunssfsi+0x3e>
    1f5a:	e1 f0       	breq	.+56     	; 0x1f94 <__fixunssfsi+0x4c>
    1f5c:	66 0f       	add	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	1a f0       	brmi	.+6      	; 0x1f6c <__fixunssfsi+0x24>
    1f66:	ba 95       	dec	r27
    1f68:	c9 f7       	brne	.-14     	; 0x1f5c <__fixunssfsi+0x14>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <__fixunssfsi+0x4c>
    1f6c:	b1 30       	cpi	r27, 0x01	; 1
    1f6e:	91 f0       	breq	.+36     	; 0x1f94 <__fixunssfsi+0x4c>
    1f70:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__fp_zero>
    1f74:	b1 e0       	ldi	r27, 0x01	; 1
    1f76:	08 95       	ret
    1f78:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__fp_zero>
    1f7c:	67 2f       	mov	r22, r23
    1f7e:	78 2f       	mov	r23, r24
    1f80:	88 27       	eor	r24, r24
    1f82:	b8 5f       	subi	r27, 0xF8	; 248
    1f84:	39 f0       	breq	.+14     	; 0x1f94 <__fixunssfsi+0x4c>
    1f86:	b9 3f       	cpi	r27, 0xF9	; 249
    1f88:	cc f3       	brlt	.-14     	; 0x1f7c <__fixunssfsi+0x34>
    1f8a:	86 95       	lsr	r24
    1f8c:	77 95       	ror	r23
    1f8e:	67 95       	ror	r22
    1f90:	b3 95       	inc	r27
    1f92:	d9 f7       	brne	.-10     	; 0x1f8a <__fixunssfsi+0x42>
    1f94:	3e f4       	brtc	.+14     	; 0x1fa4 <__fixunssfsi+0x5c>
    1f96:	90 95       	com	r25
    1f98:	80 95       	com	r24
    1f9a:	70 95       	com	r23
    1f9c:	61 95       	neg	r22
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	08 95       	ret

00001fa6 <__floatunsisf>:
    1fa6:	e8 94       	clt
    1fa8:	09 c0       	rjmp	.+18     	; 0x1fbc <__floatsisf+0x12>

00001faa <__floatsisf>:
    1faa:	97 fb       	bst	r25, 7
    1fac:	3e f4       	brtc	.+14     	; 0x1fbc <__floatsisf+0x12>
    1fae:	90 95       	com	r25
    1fb0:	80 95       	com	r24
    1fb2:	70 95       	com	r23
    1fb4:	61 95       	neg	r22
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	99 23       	and	r25, r25
    1fbe:	a9 f0       	breq	.+42     	; 0x1fea <__floatsisf+0x40>
    1fc0:	f9 2f       	mov	r31, r25
    1fc2:	96 e9       	ldi	r25, 0x96	; 150
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	93 95       	inc	r25
    1fc8:	f6 95       	lsr	r31
    1fca:	87 95       	ror	r24
    1fcc:	77 95       	ror	r23
    1fce:	67 95       	ror	r22
    1fd0:	b7 95       	ror	r27
    1fd2:	f1 11       	cpse	r31, r1
    1fd4:	f8 cf       	rjmp	.-16     	; 0x1fc6 <__floatsisf+0x1c>
    1fd6:	fa f4       	brpl	.+62     	; 0x2016 <__floatsisf+0x6c>
    1fd8:	bb 0f       	add	r27, r27
    1fda:	11 f4       	brne	.+4      	; 0x1fe0 <__floatsisf+0x36>
    1fdc:	60 ff       	sbrs	r22, 0
    1fde:	1b c0       	rjmp	.+54     	; 0x2016 <__floatsisf+0x6c>
    1fe0:	6f 5f       	subi	r22, 0xFF	; 255
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	16 c0       	rjmp	.+44     	; 0x2016 <__floatsisf+0x6c>
    1fea:	88 23       	and	r24, r24
    1fec:	11 f0       	breq	.+4      	; 0x1ff2 <__floatsisf+0x48>
    1fee:	96 e9       	ldi	r25, 0x96	; 150
    1ff0:	11 c0       	rjmp	.+34     	; 0x2014 <__floatsisf+0x6a>
    1ff2:	77 23       	and	r23, r23
    1ff4:	21 f0       	breq	.+8      	; 0x1ffe <__floatsisf+0x54>
    1ff6:	9e e8       	ldi	r25, 0x8E	; 142
    1ff8:	87 2f       	mov	r24, r23
    1ffa:	76 2f       	mov	r23, r22
    1ffc:	05 c0       	rjmp	.+10     	; 0x2008 <__floatsisf+0x5e>
    1ffe:	66 23       	and	r22, r22
    2000:	71 f0       	breq	.+28     	; 0x201e <__floatsisf+0x74>
    2002:	96 e8       	ldi	r25, 0x86	; 134
    2004:	86 2f       	mov	r24, r22
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	2a f0       	brmi	.+10     	; 0x2016 <__floatsisf+0x6c>
    200c:	9a 95       	dec	r25
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	88 1f       	adc	r24, r24
    2014:	da f7       	brpl	.-10     	; 0x200c <__floatsisf+0x62>
    2016:	88 0f       	add	r24, r24
    2018:	96 95       	lsr	r25
    201a:	87 95       	ror	r24
    201c:	97 f9       	bld	r25, 7
    201e:	08 95       	ret

00002020 <__fp_inf>:
    2020:	97 f9       	bld	r25, 7
    2022:	9f 67       	ori	r25, 0x7F	; 127
    2024:	80 e8       	ldi	r24, 0x80	; 128
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	08 95       	ret

0000202c <__fp_nan>:
    202c:	9f ef       	ldi	r25, 0xFF	; 255
    202e:	80 ec       	ldi	r24, 0xC0	; 192
    2030:	08 95       	ret

00002032 <__fp_pscA>:
    2032:	00 24       	eor	r0, r0
    2034:	0a 94       	dec	r0
    2036:	16 16       	cp	r1, r22
    2038:	17 06       	cpc	r1, r23
    203a:	18 06       	cpc	r1, r24
    203c:	09 06       	cpc	r0, r25
    203e:	08 95       	ret

00002040 <__fp_pscB>:
    2040:	00 24       	eor	r0, r0
    2042:	0a 94       	dec	r0
    2044:	12 16       	cp	r1, r18
    2046:	13 06       	cpc	r1, r19
    2048:	14 06       	cpc	r1, r20
    204a:	05 06       	cpc	r0, r21
    204c:	08 95       	ret

0000204e <__fp_round>:
    204e:	09 2e       	mov	r0, r25
    2050:	03 94       	inc	r0
    2052:	00 0c       	add	r0, r0
    2054:	11 f4       	brne	.+4      	; 0x205a <__fp_round+0xc>
    2056:	88 23       	and	r24, r24
    2058:	52 f0       	brmi	.+20     	; 0x206e <__fp_round+0x20>
    205a:	bb 0f       	add	r27, r27
    205c:	40 f4       	brcc	.+16     	; 0x206e <__fp_round+0x20>
    205e:	bf 2b       	or	r27, r31
    2060:	11 f4       	brne	.+4      	; 0x2066 <__fp_round+0x18>
    2062:	60 ff       	sbrs	r22, 0
    2064:	04 c0       	rjmp	.+8      	; 0x206e <__fp_round+0x20>
    2066:	6f 5f       	subi	r22, 0xFF	; 255
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	8f 4f       	sbci	r24, 0xFF	; 255
    206c:	9f 4f       	sbci	r25, 0xFF	; 255
    206e:	08 95       	ret

00002070 <__fp_split3>:
    2070:	57 fd       	sbrc	r21, 7
    2072:	90 58       	subi	r25, 0x80	; 128
    2074:	44 0f       	add	r20, r20
    2076:	55 1f       	adc	r21, r21
    2078:	59 f0       	breq	.+22     	; 0x2090 <__fp_splitA+0x10>
    207a:	5f 3f       	cpi	r21, 0xFF	; 255
    207c:	71 f0       	breq	.+28     	; 0x209a <__fp_splitA+0x1a>
    207e:	47 95       	ror	r20

00002080 <__fp_splitA>:
    2080:	88 0f       	add	r24, r24
    2082:	97 fb       	bst	r25, 7
    2084:	99 1f       	adc	r25, r25
    2086:	61 f0       	breq	.+24     	; 0x20a0 <__fp_splitA+0x20>
    2088:	9f 3f       	cpi	r25, 0xFF	; 255
    208a:	79 f0       	breq	.+30     	; 0x20aa <__fp_splitA+0x2a>
    208c:	87 95       	ror	r24
    208e:	08 95       	ret
    2090:	12 16       	cp	r1, r18
    2092:	13 06       	cpc	r1, r19
    2094:	14 06       	cpc	r1, r20
    2096:	55 1f       	adc	r21, r21
    2098:	f2 cf       	rjmp	.-28     	; 0x207e <__fp_split3+0xe>
    209a:	46 95       	lsr	r20
    209c:	f1 df       	rcall	.-30     	; 0x2080 <__fp_splitA>
    209e:	08 c0       	rjmp	.+16     	; 0x20b0 <__fp_splitA+0x30>
    20a0:	16 16       	cp	r1, r22
    20a2:	17 06       	cpc	r1, r23
    20a4:	18 06       	cpc	r1, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	f1 cf       	rjmp	.-30     	; 0x208c <__fp_splitA+0xc>
    20aa:	86 95       	lsr	r24
    20ac:	71 05       	cpc	r23, r1
    20ae:	61 05       	cpc	r22, r1
    20b0:	08 94       	sec
    20b2:	08 95       	ret

000020b4 <__fp_zero>:
    20b4:	e8 94       	clt

000020b6 <__fp_szero>:
    20b6:	bb 27       	eor	r27, r27
    20b8:	66 27       	eor	r22, r22
    20ba:	77 27       	eor	r23, r23
    20bc:	cb 01       	movw	r24, r22
    20be:	97 f9       	bld	r25, 7
    20c0:	08 95       	ret

000020c2 <__mulsf3>:
    20c2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3x>
    20c6:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_round>
    20ca:	0e 94 19 10 	call	0x2032	; 0x2032 <__fp_pscA>
    20ce:	38 f0       	brcs	.+14     	; 0x20de <__mulsf3+0x1c>
    20d0:	0e 94 20 10 	call	0x2040	; 0x2040 <__fp_pscB>
    20d4:	20 f0       	brcs	.+8      	; 0x20de <__mulsf3+0x1c>
    20d6:	95 23       	and	r25, r21
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1c>
    20da:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__fp_inf>
    20de:	0c 94 16 10 	jmp	0x202c	; 0x202c <__fp_nan>
    20e2:	11 24       	eor	r1, r1
    20e4:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_szero>

000020e8 <__mulsf3x>:
    20e8:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_split3>
    20ec:	70 f3       	brcs	.-36     	; 0x20ca <__mulsf3+0x8>

000020ee <__mulsf3_pse>:
    20ee:	95 9f       	mul	r25, r21
    20f0:	c1 f3       	breq	.-16     	; 0x20e2 <__mulsf3+0x20>
    20f2:	95 0f       	add	r25, r21
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	55 1f       	adc	r21, r21
    20f8:	62 9f       	mul	r22, r18
    20fa:	f0 01       	movw	r30, r0
    20fc:	72 9f       	mul	r23, r18
    20fe:	bb 27       	eor	r27, r27
    2100:	f0 0d       	add	r31, r0
    2102:	b1 1d       	adc	r27, r1
    2104:	63 9f       	mul	r22, r19
    2106:	aa 27       	eor	r26, r26
    2108:	f0 0d       	add	r31, r0
    210a:	b1 1d       	adc	r27, r1
    210c:	aa 1f       	adc	r26, r26
    210e:	64 9f       	mul	r22, r20
    2110:	66 27       	eor	r22, r22
    2112:	b0 0d       	add	r27, r0
    2114:	a1 1d       	adc	r26, r1
    2116:	66 1f       	adc	r22, r22
    2118:	82 9f       	mul	r24, r18
    211a:	22 27       	eor	r18, r18
    211c:	b0 0d       	add	r27, r0
    211e:	a1 1d       	adc	r26, r1
    2120:	62 1f       	adc	r22, r18
    2122:	73 9f       	mul	r23, r19
    2124:	b0 0d       	add	r27, r0
    2126:	a1 1d       	adc	r26, r1
    2128:	62 1f       	adc	r22, r18
    212a:	83 9f       	mul	r24, r19
    212c:	a0 0d       	add	r26, r0
    212e:	61 1d       	adc	r22, r1
    2130:	22 1f       	adc	r18, r18
    2132:	74 9f       	mul	r23, r20
    2134:	33 27       	eor	r19, r19
    2136:	a0 0d       	add	r26, r0
    2138:	61 1d       	adc	r22, r1
    213a:	23 1f       	adc	r18, r19
    213c:	84 9f       	mul	r24, r20
    213e:	60 0d       	add	r22, r0
    2140:	21 1d       	adc	r18, r1
    2142:	82 2f       	mov	r24, r18
    2144:	76 2f       	mov	r23, r22
    2146:	6a 2f       	mov	r22, r26
    2148:	11 24       	eor	r1, r1
    214a:	9f 57       	subi	r25, 0x7F	; 127
    214c:	50 40       	sbci	r21, 0x00	; 0
    214e:	9a f0       	brmi	.+38     	; 0x2176 <__mulsf3_pse+0x88>
    2150:	f1 f0       	breq	.+60     	; 0x218e <__mulsf3_pse+0xa0>
    2152:	88 23       	and	r24, r24
    2154:	4a f0       	brmi	.+18     	; 0x2168 <__mulsf3_pse+0x7a>
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	bb 1f       	adc	r27, r27
    215c:	66 1f       	adc	r22, r22
    215e:	77 1f       	adc	r23, r23
    2160:	88 1f       	adc	r24, r24
    2162:	91 50       	subi	r25, 0x01	; 1
    2164:	50 40       	sbci	r21, 0x00	; 0
    2166:	a9 f7       	brne	.-22     	; 0x2152 <__mulsf3_pse+0x64>
    2168:	9e 3f       	cpi	r25, 0xFE	; 254
    216a:	51 05       	cpc	r21, r1
    216c:	80 f0       	brcs	.+32     	; 0x218e <__mulsf3_pse+0xa0>
    216e:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__fp_inf>
    2172:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_szero>
    2176:	5f 3f       	cpi	r21, 0xFF	; 255
    2178:	e4 f3       	brlt	.-8      	; 0x2172 <__mulsf3_pse+0x84>
    217a:	98 3e       	cpi	r25, 0xE8	; 232
    217c:	d4 f3       	brlt	.-12     	; 0x2172 <__mulsf3_pse+0x84>
    217e:	86 95       	lsr	r24
    2180:	77 95       	ror	r23
    2182:	67 95       	ror	r22
    2184:	b7 95       	ror	r27
    2186:	f7 95       	ror	r31
    2188:	e7 95       	ror	r30
    218a:	9f 5f       	subi	r25, 0xFF	; 255
    218c:	c1 f7       	brne	.-16     	; 0x217e <__mulsf3_pse+0x90>
    218e:	fe 2b       	or	r31, r30
    2190:	88 0f       	add	r24, r24
    2192:	91 1d       	adc	r25, r1
    2194:	96 95       	lsr	r25
    2196:	87 95       	ror	r24
    2198:	97 f9       	bld	r25, 7
    219a:	08 95       	ret

0000219c <__udivmodsi4>:
    219c:	a1 e2       	ldi	r26, 0x21	; 33
    219e:	1a 2e       	mov	r1, r26
    21a0:	aa 1b       	sub	r26, r26
    21a2:	bb 1b       	sub	r27, r27
    21a4:	fd 01       	movw	r30, r26
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <__udivmodsi4_ep>

000021a8 <__udivmodsi4_loop>:
    21a8:	aa 1f       	adc	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	ee 1f       	adc	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	a2 17       	cp	r26, r18
    21b2:	b3 07       	cpc	r27, r19
    21b4:	e4 07       	cpc	r30, r20
    21b6:	f5 07       	cpc	r31, r21
    21b8:	20 f0       	brcs	.+8      	; 0x21c2 <__udivmodsi4_ep>
    21ba:	a2 1b       	sub	r26, r18
    21bc:	b3 0b       	sbc	r27, r19
    21be:	e4 0b       	sbc	r30, r20
    21c0:	f5 0b       	sbc	r31, r21

000021c2 <__udivmodsi4_ep>:
    21c2:	66 1f       	adc	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	88 1f       	adc	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	1a 94       	dec	r1
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <__udivmodsi4_loop>
    21ce:	60 95       	com	r22
    21d0:	70 95       	com	r23
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	9b 01       	movw	r18, r22
    21d8:	ac 01       	movw	r20, r24
    21da:	bd 01       	movw	r22, r26
    21dc:	cf 01       	movw	r24, r30
    21de:	08 95       	ret

000021e0 <__umulhisi3>:
    21e0:	a2 9f       	mul	r26, r18
    21e2:	b0 01       	movw	r22, r0
    21e4:	b3 9f       	mul	r27, r19
    21e6:	c0 01       	movw	r24, r0
    21e8:	a3 9f       	mul	r26, r19
    21ea:	70 0d       	add	r23, r0
    21ec:	81 1d       	adc	r24, r1
    21ee:	11 24       	eor	r1, r1
    21f0:	91 1d       	adc	r25, r1
    21f2:	b2 9f       	mul	r27, r18
    21f4:	70 0d       	add	r23, r0
    21f6:	81 1d       	adc	r24, r1
    21f8:	11 24       	eor	r1, r1
    21fa:	91 1d       	adc	r25, r1
    21fc:	08 95       	ret

000021fe <__usmulhisi3>:
    21fe:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__umulhisi3>

00002202 <__usmulhisi3_tail>:
    2202:	b7 ff       	sbrs	r27, 7
    2204:	08 95       	ret
    2206:	82 1b       	sub	r24, r18
    2208:	93 0b       	sbc	r25, r19
    220a:	08 95       	ret

0000220c <__itoa_ncheck>:
    220c:	bb 27       	eor	r27, r27
    220e:	4a 30       	cpi	r20, 0x0A	; 10
    2210:	31 f4       	brne	.+12     	; 0x221e <__itoa_ncheck+0x12>
    2212:	99 23       	and	r25, r25
    2214:	22 f4       	brpl	.+8      	; 0x221e <__itoa_ncheck+0x12>
    2216:	bd e2       	ldi	r27, 0x2D	; 45
    2218:	90 95       	com	r25
    221a:	81 95       	neg	r24
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__utoa_common>

00002222 <__utoa_ncheck>:
    2222:	bb 27       	eor	r27, r27

00002224 <__utoa_common>:
    2224:	fb 01       	movw	r30, r22
    2226:	55 27       	eor	r21, r21
    2228:	aa 27       	eor	r26, r26
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	aa 1f       	adc	r26, r26
    2230:	a4 17       	cp	r26, r20
    2232:	10 f0       	brcs	.+4      	; 0x2238 <__utoa_common+0x14>
    2234:	a4 1b       	sub	r26, r20
    2236:	83 95       	inc	r24
    2238:	50 51       	subi	r21, 0x10	; 16
    223a:	b9 f7       	brne	.-18     	; 0x222a <__utoa_common+0x6>
    223c:	a0 5d       	subi	r26, 0xD0	; 208
    223e:	aa 33       	cpi	r26, 0x3A	; 58
    2240:	08 f0       	brcs	.+2      	; 0x2244 <__utoa_common+0x20>
    2242:	a9 5d       	subi	r26, 0xD9	; 217
    2244:	a1 93       	st	Z+, r26
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	79 f7       	brne	.-34     	; 0x2228 <__utoa_common+0x4>
    224a:	b1 11       	cpse	r27, r1
    224c:	b1 93       	st	Z+, r27
    224e:	11 92       	st	Z+, r1
    2250:	cb 01       	movw	r24, r22
    2252:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <strrev>

00002256 <strrev>:
    2256:	dc 01       	movw	r26, r24
    2258:	fc 01       	movw	r30, r24
    225a:	67 2f       	mov	r22, r23
    225c:	71 91       	ld	r23, Z+
    225e:	77 23       	and	r23, r23
    2260:	e1 f7       	brne	.-8      	; 0x225a <strrev+0x4>
    2262:	32 97       	sbiw	r30, 0x02	; 2
    2264:	04 c0       	rjmp	.+8      	; 0x226e <strrev+0x18>
    2266:	7c 91       	ld	r23, X
    2268:	6d 93       	st	X+, r22
    226a:	70 83       	st	Z, r23
    226c:	62 91       	ld	r22, -Z
    226e:	ae 17       	cp	r26, r30
    2270:	bf 07       	cpc	r27, r31
    2272:	c8 f3       	brcs	.-14     	; 0x2266 <strrev+0x10>
    2274:	08 95       	ret

00002276 <_exit>:
    2276:	f8 94       	cli

00002278 <__stop_program>:
    2278:	ff cf       	rjmp	.-2      	; 0x2278 <__stop_program>
